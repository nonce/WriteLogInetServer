/* C2H.h
   Generated by gSOAP 2.8.32 for ContestQsos2.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef C2H_H
#define C2H_H
#include "C2Stub.h"

namespace C2 {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 C2_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 C2_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 C2_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 C2_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_C2_xsd__byte_DEFINED
#define SOAP_TYPE_C2_xsd__byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__byte(struct soap*, char *);

#define soap_xsd__byte2s soap_byte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);

#define soap_s2xsd__byte soap_s2byte

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_xsd__byte(struct soap *soap, char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

inline int soap_read_xsd__byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_byte_DEFINED
#define SOAP_TYPE_C2_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_short_DEFINED
#define SOAP_TYPE_C2_short_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest24__char_DEFINED
#define SOAP_TYPE_C2_contest24__char_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest24__char(struct soap*, int *);

#define soap_contest24__char2s soap_int2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__char(struct soap*, const char*, int, const int *, const char*);

#define soap_s2contest24__char soap_s2int

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_contest24__char(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__char(struct soap*, const int *, const char*, const char*);

inline int soap_write_contest24__char(struct soap *soap, int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_contest24__char(soap, p, "contest24:char", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_contest24__char(struct soap*, int *, const char*, const char*);

inline int soap_read_contest24__char(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_contest24__char(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_int_DEFINED
#define SOAP_TYPE_C2_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_LONG64_DEFINED
#define SOAP_TYPE_C2_LONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_float_DEFINED
#define SOAP_TYPE_C2_float_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_double_DEFINED
#define SOAP_TYPE_C2_double_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedByte_DEFINED
#define SOAP_TYPE_C2_xsd__unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__unsignedByte(struct soap*, unsigned char *);

#define soap_xsd__unsignedByte2s soap_unsignedByte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);

#define soap_s2xsd__unsignedByte soap_s2unsignedByte

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_xsd__unsignedByte(struct soap *soap, unsigned char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_unsignedByte_DEFINED
#define SOAP_TYPE_C2_unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_unsignedShort_DEFINED
#define SOAP_TYPE_C2_unsignedShort_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap*, unsigned short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

inline int soap_write_unsignedShort(struct soap *soap, unsigned short const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

inline int soap_read_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_unsignedInt_DEFINED
#define SOAP_TYPE_C2_unsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_ULONG64_DEFINED
#define SOAP_TYPE_C2_ULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ULONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_dateTime_DEFINED
#define SOAP_TYPE_C2_dateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_dateTime(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_bool_DEFINED
#define SOAP_TYPE_C2_bool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

inline bool * soap_new_bool(struct soap *soap, int n = -1)
{
	return static_cast<bool *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(bool)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest24__guid___DEFINED
#define SOAP_TYPE_C2_contest24__guid___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__guid__(struct soap*, const char*, int, const contest24__guid__ *, const char*);
SOAP_FMAC3 contest24__guid__ * SOAP_FMAC4 soap_in_contest24__guid__(struct soap*, const char*, contest24__guid__ *, const char*);
SOAP_FMAC1 contest24__guid__ * SOAP_FMAC2 soap_instantiate_contest24__guid__(struct soap*, int, const char*, const char*, size_t*);

inline contest24__guid__ * soap_new_contest24__guid__(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest24__guid__(soap, n, NULL, NULL, NULL);
}

inline contest24__guid__ * soap_new_req_contest24__guid__(
	struct soap *soap,
	const std::string& __item)
{
	contest24__guid__ *_p = soap_new_contest24__guid__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest24__guid__::__item = __item;
	}
	return _p;
}

inline contest24__guid__ * soap_new_set_contest24__guid__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	contest24__guid__ *_p = soap_new_contest24__guid__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest24__guid__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest24__guid__(struct soap *soap, contest24__guid__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest24:guid", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest24__guid__ * SOAP_FMAC4 soap_get_contest24__guid__(struct soap*, contest24__guid__ *, const char*, const char*);

inline int soap_read_contest24__guid__(struct soap *soap, contest24__guid__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest24__guid__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest24__guid_DEFINED
#define SOAP_TYPE_C2_contest24__guid_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest24__guid(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest24__guid(struct soap*, const std::string *);

#define soap_contest24__guid2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__guid(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2contest24__guid(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_contest24__guid(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_contest24__guid soap_instantiate_std__string


#define soap_new_contest24__guid soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__guid(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_contest24__guid(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_contest24__guid(soap, p, "contest24:guid", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_contest24__guid(struct soap*, std::string *, const char*, const char*);

inline int soap_read_contest24__guid(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_contest24__guid(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest24__duration___DEFINED
#define SOAP_TYPE_C2_contest24__duration___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__duration__(struct soap*, const char*, int, const contest24__duration__ *, const char*);
SOAP_FMAC3 contest24__duration__ * SOAP_FMAC4 soap_in_contest24__duration__(struct soap*, const char*, contest24__duration__ *, const char*);
SOAP_FMAC1 contest24__duration__ * SOAP_FMAC2 soap_instantiate_contest24__duration__(struct soap*, int, const char*, const char*, size_t*);

inline contest24__duration__ * soap_new_contest24__duration__(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest24__duration__(soap, n, NULL, NULL, NULL);
}

inline contest24__duration__ * soap_new_req_contest24__duration__(
	struct soap *soap,
	const std::string& __item)
{
	contest24__duration__ *_p = soap_new_contest24__duration__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest24__duration__::__item = __item;
	}
	return _p;
}

inline contest24__duration__ * soap_new_set_contest24__duration__(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	contest24__duration__ *_p = soap_new_contest24__duration__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest24__duration__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest24__duration__(struct soap *soap, contest24__duration__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest24:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest24__duration__ * SOAP_FMAC4 soap_get_contest24__duration__(struct soap*, contest24__duration__ *, const char*, const char*);

inline int soap_read_contest24__duration__(struct soap *soap, contest24__duration__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest24__duration__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest24__duration_DEFINED
#define SOAP_TYPE_C2_contest24__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest24__duration(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest24__duration(struct soap*, const std::string *);

#define soap_contest24__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2contest24__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_contest24__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_contest24__duration soap_instantiate_std__string


#define soap_new_contest24__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_contest24__duration(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_contest24__duration(soap, p, "contest24:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_contest24__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_contest24__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_contest24__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest24__char___DEFINED
#define SOAP_TYPE_C2_contest24__char___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__char__(struct soap*, const char*, int, const contest24__char__ *, const char*);
SOAP_FMAC3 contest24__char__ * SOAP_FMAC4 soap_in_contest24__char__(struct soap*, const char*, contest24__char__ *, const char*);
SOAP_FMAC1 contest24__char__ * SOAP_FMAC2 soap_instantiate_contest24__char__(struct soap*, int, const char*, const char*, size_t*);

inline contest24__char__ * soap_new_contest24__char__(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest24__char__(soap, n, NULL, NULL, NULL);
}

inline contest24__char__ * soap_new_req_contest24__char__(
	struct soap *soap,
	int __item)
{
	contest24__char__ *_p = soap_new_contest24__char__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest24__char__::__item = __item;
	}
	return _p;
}

inline contest24__char__ * soap_new_set_contest24__char__(
	struct soap *soap,
	int __item,
	char *__item1)
{
	contest24__char__ *_p = soap_new_contest24__char__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest24__char__::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest24__char__(struct soap *soap, contest24__char__ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest24:char", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest24__char__ * SOAP_FMAC4 soap_get_contest24__char__(struct soap*, contest24__char__ *, const char*, const char*);

inline int soap_read_contest24__char__(struct soap *soap, contest24__char__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest24__char__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse_DEFINED
#define SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ExchangeFrequenciesResponse(struct soap*, const char*, int, const _contest23__ExchangeFrequenciesResponse *, const char*);
SOAP_FMAC3 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_in__contest23__ExchangeFrequenciesResponse(struct soap*, const char*, _contest23__ExchangeFrequenciesResponse *, const char*);
SOAP_FMAC1 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC2 soap_instantiate__contest23__ExchangeFrequenciesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__ExchangeFrequenciesResponse * soap_new__contest23__ExchangeFrequenciesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__ExchangeFrequenciesResponse(soap, n, NULL, NULL, NULL);
}

inline _contest23__ExchangeFrequenciesResponse * soap_new_req__contest23__ExchangeFrequenciesResponse(
	struct soap *soap,
	contest25__ArrayOfRigFrequency *ExchangeFrequenciesResult)
{
	_contest23__ExchangeFrequenciesResponse *_p = soap_new__contest23__ExchangeFrequenciesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult = ExchangeFrequenciesResult;
	}
	return _p;
}

inline _contest23__ExchangeFrequenciesResponse * soap_new_set__contest23__ExchangeFrequenciesResponse(
	struct soap *soap,
	contest25__ArrayOfRigFrequency *ExchangeFrequenciesResult)
{
	_contest23__ExchangeFrequenciesResponse *_p = soap_new__contest23__ExchangeFrequenciesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult = ExchangeFrequenciesResult;
	}
	return _p;
}

inline int soap_write__contest23__ExchangeFrequenciesResponse(struct soap *soap, _contest23__ExchangeFrequenciesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:ExchangeFrequenciesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_get__contest23__ExchangeFrequenciesResponse(struct soap*, _contest23__ExchangeFrequenciesResponse *, const char*, const char*);

inline int soap_read__contest23__ExchangeFrequenciesResponse(struct soap *soap, _contest23__ExchangeFrequenciesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__ExchangeFrequenciesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__ExchangeFrequencies_DEFINED
#define SOAP_TYPE_C2__contest23__ExchangeFrequencies_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ExchangeFrequencies(struct soap*, const char*, int, const _contest23__ExchangeFrequencies *, const char*);
SOAP_FMAC3 _contest23__ExchangeFrequencies * SOAP_FMAC4 soap_in__contest23__ExchangeFrequencies(struct soap*, const char*, _contest23__ExchangeFrequencies *, const char*);
SOAP_FMAC1 _contest23__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate__contest23__ExchangeFrequencies(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__ExchangeFrequencies * soap_new__contest23__ExchangeFrequencies(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__ExchangeFrequencies(soap, n, NULL, NULL, NULL);
}

inline _contest23__ExchangeFrequencies * soap_new_req__contest23__ExchangeFrequencies(
	struct soap *soap,
	contest25__ArrayOfRigFrequency *IncomingFreqs)
{
	_contest23__ExchangeFrequencies *_p = soap_new__contest23__ExchangeFrequencies(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__ExchangeFrequencies::IncomingFreqs = IncomingFreqs;
	}
	return _p;
}

inline _contest23__ExchangeFrequencies * soap_new_set__contest23__ExchangeFrequencies(
	struct soap *soap,
	contest25__ArrayOfRigFrequency *IncomingFreqs)
{
	_contest23__ExchangeFrequencies *_p = soap_new__contest23__ExchangeFrequencies(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__ExchangeFrequencies::IncomingFreqs = IncomingFreqs;
	}
	return _p;
}

inline int soap_write__contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:ExchangeFrequencies", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__ExchangeFrequencies * SOAP_FMAC4 soap_get__contest23__ExchangeFrequencies(struct soap*, _contest23__ExchangeFrequencies *, const char*, const char*);

inline int soap_read__contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__ExchangeFrequencies(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse_DEFINED
#define SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ColumnNamesToIndicesResponse(struct soap*, const char*, int, const _contest23__ColumnNamesToIndicesResponse *, const char*);
SOAP_FMAC3 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_in__contest23__ColumnNamesToIndicesResponse(struct soap*, const char*, _contest23__ColumnNamesToIndicesResponse *, const char*);
SOAP_FMAC1 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC2 soap_instantiate__contest23__ColumnNamesToIndicesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__ColumnNamesToIndicesResponse * soap_new__contest23__ColumnNamesToIndicesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__ColumnNamesToIndicesResponse(soap, n, NULL, NULL, NULL);
}

inline _contest23__ColumnNamesToIndicesResponse * soap_new_req__contest23__ColumnNamesToIndicesResponse(
	struct soap *soap,
	contest26__ArrayOfint *ColumnNamesToIndicesResult)
{
	_contest23__ColumnNamesToIndicesResponse *_p = soap_new__contest23__ColumnNamesToIndicesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult = ColumnNamesToIndicesResult;
	}
	return _p;
}

inline _contest23__ColumnNamesToIndicesResponse * soap_new_set__contest23__ColumnNamesToIndicesResponse(
	struct soap *soap,
	contest26__ArrayOfint *ColumnNamesToIndicesResult)
{
	_contest23__ColumnNamesToIndicesResponse *_p = soap_new__contest23__ColumnNamesToIndicesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult = ColumnNamesToIndicesResult;
	}
	return _p;
}

inline int soap_write__contest23__ColumnNamesToIndicesResponse(struct soap *soap, _contest23__ColumnNamesToIndicesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:ColumnNamesToIndicesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_get__contest23__ColumnNamesToIndicesResponse(struct soap*, _contest23__ColumnNamesToIndicesResponse *, const char*, const char*);

inline int soap_read__contest23__ColumnNamesToIndicesResponse(struct soap *soap, _contest23__ColumnNamesToIndicesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__ColumnNamesToIndicesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__ColumnNamesToIndices_DEFINED
#define SOAP_TYPE_C2__contest23__ColumnNamesToIndices_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ColumnNamesToIndices(struct soap*, const char*, int, const _contest23__ColumnNamesToIndices *, const char*);
SOAP_FMAC3 _contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_in__contest23__ColumnNamesToIndices(struct soap*, const char*, _contest23__ColumnNamesToIndices *, const char*);
SOAP_FMAC1 _contest23__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate__contest23__ColumnNamesToIndices(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__ColumnNamesToIndices * soap_new__contest23__ColumnNamesToIndices(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__ColumnNamesToIndices(soap, n, NULL, NULL, NULL);
}

inline _contest23__ColumnNamesToIndices * soap_new_req__contest23__ColumnNamesToIndices(
	struct soap *soap,
	const std::string& SessionId,
	contest26__ArrayOfstring *ColumnNames)
{
	_contest23__ColumnNamesToIndices *_p = soap_new__contest23__ColumnNamesToIndices(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__ColumnNamesToIndices::SessionId = SessionId;
		_p->_contest23__ColumnNamesToIndices::ColumnNames = ColumnNames;
	}
	return _p;
}

inline _contest23__ColumnNamesToIndices * soap_new_set__contest23__ColumnNamesToIndices(
	struct soap *soap,
	const std::string& SessionId,
	contest26__ArrayOfstring *ColumnNames)
{
	_contest23__ColumnNamesToIndices *_p = soap_new__contest23__ColumnNamesToIndices(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__ColumnNamesToIndices::SessionId = SessionId;
		_p->_contest23__ColumnNamesToIndices::ColumnNames = ColumnNames;
	}
	return _p;
}

inline int soap_write__contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:ColumnNamesToIndices", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_get__contest23__ColumnNamesToIndices(struct soap*, _contest23__ColumnNamesToIndices *, const char*, const char*);

inline int soap_read__contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__ColumnNamesToIndices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse_DEFINED
#define SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__getQsosByKeyArrayResponse(struct soap*, const char*, int, const _contest23__getQsosByKeyArrayResponse *, const char*);
SOAP_FMAC3 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_in__contest23__getQsosByKeyArrayResponse(struct soap*, const char*, _contest23__getQsosByKeyArrayResponse *, const char*);
SOAP_FMAC1 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC2 soap_instantiate__contest23__getQsosByKeyArrayResponse(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__getQsosByKeyArrayResponse * soap_new__contest23__getQsosByKeyArrayResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__getQsosByKeyArrayResponse(soap, n, NULL, NULL, NULL);
}

inline _contest23__getQsosByKeyArrayResponse * soap_new_req__contest23__getQsosByKeyArrayResponse(
	struct soap *soap,
	contest25__QsoUpdate *getQsosByKeyArrayResult)
{
	_contest23__getQsosByKeyArrayResponse *_p = soap_new__contest23__getQsosByKeyArrayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult = getQsosByKeyArrayResult;
	}
	return _p;
}

inline _contest23__getQsosByKeyArrayResponse * soap_new_set__contest23__getQsosByKeyArrayResponse(
	struct soap *soap,
	contest25__QsoUpdate *getQsosByKeyArrayResult)
{
	_contest23__getQsosByKeyArrayResponse *_p = soap_new__contest23__getQsosByKeyArrayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult = getQsosByKeyArrayResult;
	}
	return _p;
}

inline int soap_write__contest23__getQsosByKeyArrayResponse(struct soap *soap, _contest23__getQsosByKeyArrayResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:getQsosByKeyArrayResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_get__contest23__getQsosByKeyArrayResponse(struct soap*, _contest23__getQsosByKeyArrayResponse *, const char*, const char*);

inline int soap_read__contest23__getQsosByKeyArrayResponse(struct soap *soap, _contest23__getQsosByKeyArrayResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__getQsosByKeyArrayResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__getQsosByKeyArray_DEFINED
#define SOAP_TYPE_C2__contest23__getQsosByKeyArray_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__getQsosByKeyArray(struct soap*, const char*, int, const _contest23__getQsosByKeyArray *, const char*);
SOAP_FMAC3 _contest23__getQsosByKeyArray * SOAP_FMAC4 soap_in__contest23__getQsosByKeyArray(struct soap*, const char*, _contest23__getQsosByKeyArray *, const char*);
SOAP_FMAC1 _contest23__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate__contest23__getQsosByKeyArray(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__getQsosByKeyArray * soap_new__contest23__getQsosByKeyArray(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__getQsosByKeyArray(soap, n, NULL, NULL, NULL);
}

inline _contest23__getQsosByKeyArray * soap_new_req__contest23__getQsosByKeyArray(
	struct soap *soap,
	const std::string& SessionId,
	contest26__ArrayOfstring *QsoKeyArray)
{
	_contest23__getQsosByKeyArray *_p = soap_new__contest23__getQsosByKeyArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__getQsosByKeyArray::SessionId = SessionId;
		_p->_contest23__getQsosByKeyArray::QsoKeyArray = QsoKeyArray;
	}
	return _p;
}

inline _contest23__getQsosByKeyArray * soap_new_set__contest23__getQsosByKeyArray(
	struct soap *soap,
	const std::string& SessionId,
	contest26__ArrayOfstring *QsoKeyArray)
{
	_contest23__getQsosByKeyArray *_p = soap_new__contest23__getQsosByKeyArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__getQsosByKeyArray::SessionId = SessionId;
		_p->_contest23__getQsosByKeyArray::QsoKeyArray = QsoKeyArray;
	}
	return _p;
}

inline int soap_write__contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:getQsosByKeyArray", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__getQsosByKeyArray * SOAP_FMAC4 soap_get__contest23__getQsosByKeyArray(struct soap*, _contest23__getQsosByKeyArray *, const char*, const char*);

inline int soap_read__contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__getQsosByKeyArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse_DEFINED
#define SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__AddAndGetLogSummaryResponse(struct soap*, const char*, int, const _contest23__AddAndGetLogSummaryResponse *, const char*);
SOAP_FMAC3 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_in__contest23__AddAndGetLogSummaryResponse(struct soap*, const char*, _contest23__AddAndGetLogSummaryResponse *, const char*);
SOAP_FMAC1 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC2 soap_instantiate__contest23__AddAndGetLogSummaryResponse(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__AddAndGetLogSummaryResponse * soap_new__contest23__AddAndGetLogSummaryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__AddAndGetLogSummaryResponse(soap, n, NULL, NULL, NULL);
}

inline _contest23__AddAndGetLogSummaryResponse * soap_new_req__contest23__AddAndGetLogSummaryResponse(
	struct soap *soap,
	contest25__LogSummary *AddAndGetLogSummaryResult)
{
	_contest23__AddAndGetLogSummaryResponse *_p = soap_new__contest23__AddAndGetLogSummaryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult = AddAndGetLogSummaryResult;
	}
	return _p;
}

inline _contest23__AddAndGetLogSummaryResponse * soap_new_set__contest23__AddAndGetLogSummaryResponse(
	struct soap *soap,
	contest25__LogSummary *AddAndGetLogSummaryResult)
{
	_contest23__AddAndGetLogSummaryResponse *_p = soap_new__contest23__AddAndGetLogSummaryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult = AddAndGetLogSummaryResult;
	}
	return _p;
}

inline int soap_write__contest23__AddAndGetLogSummaryResponse(struct soap *soap, _contest23__AddAndGetLogSummaryResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:AddAndGetLogSummaryResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_get__contest23__AddAndGetLogSummaryResponse(struct soap*, _contest23__AddAndGetLogSummaryResponse *, const char*, const char*);

inline int soap_read__contest23__AddAndGetLogSummaryResponse(struct soap *soap, _contest23__AddAndGetLogSummaryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__AddAndGetLogSummaryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__AddAndGetLogSummary_DEFINED
#define SOAP_TYPE_C2__contest23__AddAndGetLogSummary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__AddAndGetLogSummary(struct soap*, const char*, int, const _contest23__AddAndGetLogSummary *, const char*);
SOAP_FMAC3 _contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_in__contest23__AddAndGetLogSummary(struct soap*, const char*, _contest23__AddAndGetLogSummary *, const char*);
SOAP_FMAC1 _contest23__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate__contest23__AddAndGetLogSummary(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__AddAndGetLogSummary * soap_new__contest23__AddAndGetLogSummary(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__AddAndGetLogSummary(soap, n, NULL, NULL, NULL);
}

inline _contest23__AddAndGetLogSummary * soap_new_req__contest23__AddAndGetLogSummary(
	struct soap *soap,
	const std::string& SessionId,
	contest25__ArrayOfQso *QsoAddArray,
	int OldState,
	int MaxRequested)
{
	_contest23__AddAndGetLogSummary *_p = soap_new__contest23__AddAndGetLogSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__AddAndGetLogSummary::SessionId = SessionId;
		_p->_contest23__AddAndGetLogSummary::QsoAddArray = QsoAddArray;
		_p->_contest23__AddAndGetLogSummary::OldState = OldState;
		_p->_contest23__AddAndGetLogSummary::MaxRequested = MaxRequested;
	}
	return _p;
}

inline _contest23__AddAndGetLogSummary * soap_new_set__contest23__AddAndGetLogSummary(
	struct soap *soap,
	const std::string& SessionId,
	contest25__ArrayOfQso *QsoAddArray,
	int OldState,
	int MaxRequested)
{
	_contest23__AddAndGetLogSummary *_p = soap_new__contest23__AddAndGetLogSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__AddAndGetLogSummary::SessionId = SessionId;
		_p->_contest23__AddAndGetLogSummary::QsoAddArray = QsoAddArray;
		_p->_contest23__AddAndGetLogSummary::OldState = OldState;
		_p->_contest23__AddAndGetLogSummary::MaxRequested = MaxRequested;
	}
	return _p;
}

inline int soap_write__contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:AddAndGetLogSummary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_get__contest23__AddAndGetLogSummary(struct soap*, _contest23__AddAndGetLogSummary *, const char*, const char*);

inline int soap_read__contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__AddAndGetLogSummary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__addAndGetQsosResponse_DEFINED
#define SOAP_TYPE_C2__contest23__addAndGetQsosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__addAndGetQsosResponse(struct soap*, const char*, int, const _contest23__addAndGetQsosResponse *, const char*);
SOAP_FMAC3 _contest23__addAndGetQsosResponse * SOAP_FMAC4 soap_in__contest23__addAndGetQsosResponse(struct soap*, const char*, _contest23__addAndGetQsosResponse *, const char*);
SOAP_FMAC1 _contest23__addAndGetQsosResponse * SOAP_FMAC2 soap_instantiate__contest23__addAndGetQsosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__addAndGetQsosResponse * soap_new__contest23__addAndGetQsosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__addAndGetQsosResponse(soap, n, NULL, NULL, NULL);
}

inline _contest23__addAndGetQsosResponse * soap_new_req__contest23__addAndGetQsosResponse(
	struct soap *soap,
	contest25__QsoUpdate *addAndGetQsosResult)
{
	_contest23__addAndGetQsosResponse *_p = soap_new__contest23__addAndGetQsosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__addAndGetQsosResponse::addAndGetQsosResult = addAndGetQsosResult;
	}
	return _p;
}

inline _contest23__addAndGetQsosResponse * soap_new_set__contest23__addAndGetQsosResponse(
	struct soap *soap,
	contest25__QsoUpdate *addAndGetQsosResult)
{
	_contest23__addAndGetQsosResponse *_p = soap_new__contest23__addAndGetQsosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__addAndGetQsosResponse::addAndGetQsosResult = addAndGetQsosResult;
	}
	return _p;
}

inline int soap_write__contest23__addAndGetQsosResponse(struct soap *soap, _contest23__addAndGetQsosResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:addAndGetQsosResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__addAndGetQsosResponse * SOAP_FMAC4 soap_get__contest23__addAndGetQsosResponse(struct soap*, _contest23__addAndGetQsosResponse *, const char*, const char*);

inline int soap_read__contest23__addAndGetQsosResponse(struct soap *soap, _contest23__addAndGetQsosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__addAndGetQsosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__addAndGetQsos_DEFINED
#define SOAP_TYPE_C2__contest23__addAndGetQsos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__addAndGetQsos(struct soap*, const char*, int, const _contest23__addAndGetQsos *, const char*);
SOAP_FMAC3 _contest23__addAndGetQsos * SOAP_FMAC4 soap_in__contest23__addAndGetQsos(struct soap*, const char*, _contest23__addAndGetQsos *, const char*);
SOAP_FMAC1 _contest23__addAndGetQsos * SOAP_FMAC2 soap_instantiate__contest23__addAndGetQsos(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__addAndGetQsos * soap_new__contest23__addAndGetQsos(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__addAndGetQsos(soap, n, NULL, NULL, NULL);
}

inline _contest23__addAndGetQsos * soap_new_req__contest23__addAndGetQsos(
	struct soap *soap,
	const std::string& SessionId,
	contest25__ArrayOfQso *QsoAddArray,
	int OldState,
	int MaxRequested)
{
	_contest23__addAndGetQsos *_p = soap_new__contest23__addAndGetQsos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__addAndGetQsos::SessionId = SessionId;
		_p->_contest23__addAndGetQsos::QsoAddArray = QsoAddArray;
		_p->_contest23__addAndGetQsos::OldState = OldState;
		_p->_contest23__addAndGetQsos::MaxRequested = MaxRequested;
	}
	return _p;
}

inline _contest23__addAndGetQsos * soap_new_set__contest23__addAndGetQsos(
	struct soap *soap,
	const std::string& SessionId,
	contest25__ArrayOfQso *QsoAddArray,
	int OldState,
	int MaxRequested)
{
	_contest23__addAndGetQsos *_p = soap_new__contest23__addAndGetQsos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__addAndGetQsos::SessionId = SessionId;
		_p->_contest23__addAndGetQsos::QsoAddArray = QsoAddArray;
		_p->_contest23__addAndGetQsos::OldState = OldState;
		_p->_contest23__addAndGetQsos::MaxRequested = MaxRequested;
	}
	return _p;
}

inline int soap_write__contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:addAndGetQsos", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__addAndGetQsos * SOAP_FMAC4 soap_get__contest23__addAndGetQsos(struct soap*, _contest23__addAndGetQsos *, const char*, const char*);

inline int soap_read__contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__addAndGetQsos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__GetSessionIdResponse_DEFINED
#define SOAP_TYPE_C2__contest23__GetSessionIdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__GetSessionIdResponse(struct soap*, const char*, int, const _contest23__GetSessionIdResponse *, const char*);
SOAP_FMAC3 _contest23__GetSessionIdResponse * SOAP_FMAC4 soap_in__contest23__GetSessionIdResponse(struct soap*, const char*, _contest23__GetSessionIdResponse *, const char*);
SOAP_FMAC1 _contest23__GetSessionIdResponse * SOAP_FMAC2 soap_instantiate__contest23__GetSessionIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__GetSessionIdResponse * soap_new__contest23__GetSessionIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__GetSessionIdResponse(soap, n, NULL, NULL, NULL);
}

inline _contest23__GetSessionIdResponse * soap_new_req__contest23__GetSessionIdResponse(
	struct soap *soap,
	const std::string& GetSessionIdResult)
{
	_contest23__GetSessionIdResponse *_p = soap_new__contest23__GetSessionIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__GetSessionIdResponse::GetSessionIdResult = GetSessionIdResult;
	}
	return _p;
}

inline _contest23__GetSessionIdResponse * soap_new_set__contest23__GetSessionIdResponse(
	struct soap *soap,
	const std::string& GetSessionIdResult)
{
	_contest23__GetSessionIdResponse *_p = soap_new__contest23__GetSessionIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_contest23__GetSessionIdResponse::GetSessionIdResult = GetSessionIdResult;
	}
	return _p;
}

inline int soap_write__contest23__GetSessionIdResponse(struct soap *soap, _contest23__GetSessionIdResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:GetSessionIdResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__GetSessionIdResponse * SOAP_FMAC4 soap_get__contest23__GetSessionIdResponse(struct soap*, _contest23__GetSessionIdResponse *, const char*, const char*);

inline int soap_read__contest23__GetSessionIdResponse(struct soap *soap, _contest23__GetSessionIdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__GetSessionIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2__contest23__GetSessionId_DEFINED
#define SOAP_TYPE_C2__contest23__GetSessionId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__GetSessionId(struct soap*, const char*, int, const _contest23__GetSessionId *, const char*);
SOAP_FMAC3 _contest23__GetSessionId * SOAP_FMAC4 soap_in__contest23__GetSessionId(struct soap*, const char*, _contest23__GetSessionId *, const char*);
SOAP_FMAC1 _contest23__GetSessionId * SOAP_FMAC2 soap_instantiate__contest23__GetSessionId(struct soap*, int, const char*, const char*, size_t*);

inline _contest23__GetSessionId * soap_new__contest23__GetSessionId(struct soap *soap, int n = -1)
{
	return soap_instantiate__contest23__GetSessionId(soap, n, NULL, NULL, NULL);
}

inline _contest23__GetSessionId * soap_new_req__contest23__GetSessionId(
	struct soap *soap)
{
	_contest23__GetSessionId *_p = soap_new__contest23__GetSessionId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _contest23__GetSessionId * soap_new_set__contest23__GetSessionId(
	struct soap *soap)
{
	_contest23__GetSessionId *_p = soap_new__contest23__GetSessionId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest23:GetSessionId", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _contest23__GetSessionId * SOAP_FMAC4 soap_get__contest23__GetSessionId(struct soap*, _contest23__GetSessionId *, const char*, const char*);

inline int soap_read__contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__contest23__GetSessionId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest25__RigFrequency_DEFINED
#define SOAP_TYPE_C2_contest25__RigFrequency_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__RigFrequency(struct soap*, const char*, int, const contest25__RigFrequency *, const char*);
SOAP_FMAC3 contest25__RigFrequency * SOAP_FMAC4 soap_in_contest25__RigFrequency(struct soap*, const char*, contest25__RigFrequency *, const char*);
SOAP_FMAC1 contest25__RigFrequency * SOAP_FMAC2 soap_instantiate_contest25__RigFrequency(struct soap*, int, const char*, const char*, size_t*);

inline contest25__RigFrequency * soap_new_contest25__RigFrequency(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest25__RigFrequency(soap, n, NULL, NULL, NULL);
}

inline contest25__RigFrequency * soap_new_req_contest25__RigFrequency(
	struct soap *soap,
	const std::string& label,
	int mode,
	int networkLetter,
	double recvFreq,
	int rigNumber,
	const std::string& station,
	double xmitFreq)
{
	contest25__RigFrequency *_p = soap_new_contest25__RigFrequency(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__RigFrequency::label = label;
		_p->contest25__RigFrequency::mode = mode;
		_p->contest25__RigFrequency::networkLetter = networkLetter;
		_p->contest25__RigFrequency::recvFreq = recvFreq;
		_p->contest25__RigFrequency::rigNumber = rigNumber;
		_p->contest25__RigFrequency::station = station;
		_p->contest25__RigFrequency::xmitFreq = xmitFreq;
	}
	return _p;
}

inline contest25__RigFrequency * soap_new_set_contest25__RigFrequency(
	struct soap *soap,
	const std::string& label,
	int mode,
	int networkLetter,
	double recvFreq,
	int rigNumber,
	const std::string& station,
	double xmitFreq,
	char *__item1)
{
	contest25__RigFrequency *_p = soap_new_contest25__RigFrequency(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__RigFrequency::label = label;
		_p->contest25__RigFrequency::mode = mode;
		_p->contest25__RigFrequency::networkLetter = networkLetter;
		_p->contest25__RigFrequency::recvFreq = recvFreq;
		_p->contest25__RigFrequency::rigNumber = rigNumber;
		_p->contest25__RigFrequency::station = station;
		_p->contest25__RigFrequency::xmitFreq = xmitFreq;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest25__RigFrequency(struct soap *soap, contest25__RigFrequency const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest25:RigFrequency", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest25__RigFrequency * SOAP_FMAC4 soap_get_contest25__RigFrequency(struct soap*, contest25__RigFrequency *, const char*, const char*);

inline int soap_read_contest25__RigFrequency(struct soap *soap, contest25__RigFrequency *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest25__RigFrequency(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest25__ArrayOfRigFrequency_DEFINED
#define SOAP_TYPE_C2_contest25__ArrayOfRigFrequency_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfRigFrequency(struct soap*, const char*, int, const contest25__ArrayOfRigFrequency *, const char*);
SOAP_FMAC3 contest25__ArrayOfRigFrequency * SOAP_FMAC4 soap_in_contest25__ArrayOfRigFrequency(struct soap*, const char*, contest25__ArrayOfRigFrequency *, const char*);
SOAP_FMAC1 contest25__ArrayOfRigFrequency * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfRigFrequency(struct soap*, int, const char*, const char*, size_t*);

inline contest25__ArrayOfRigFrequency * soap_new_contest25__ArrayOfRigFrequency(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest25__ArrayOfRigFrequency(soap, n, NULL, NULL, NULL);
}

inline contest25__ArrayOfRigFrequency * soap_new_req_contest25__ArrayOfRigFrequency(
	struct soap *soap,
	const std::vector<contest25__RigFrequency *> & RigFrequency)
{
	contest25__ArrayOfRigFrequency *_p = soap_new_contest25__ArrayOfRigFrequency(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__ArrayOfRigFrequency::RigFrequency = RigFrequency;
	}
	return _p;
}

inline contest25__ArrayOfRigFrequency * soap_new_set_contest25__ArrayOfRigFrequency(
	struct soap *soap,
	const std::vector<contest25__RigFrequency *> & RigFrequency,
	char *__item1)
{
	contest25__ArrayOfRigFrequency *_p = soap_new_contest25__ArrayOfRigFrequency(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__ArrayOfRigFrequency::RigFrequency = RigFrequency;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest25:ArrayOfRigFrequency", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest25__ArrayOfRigFrequency * SOAP_FMAC4 soap_get_contest25__ArrayOfRigFrequency(struct soap*, contest25__ArrayOfRigFrequency *, const char*, const char*);

inline int soap_read_contest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest25__ArrayOfRigFrequency(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest25__QsoIdVersion_DEFINED
#define SOAP_TYPE_C2_contest25__QsoIdVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__QsoIdVersion(struct soap*, const char*, int, const contest25__QsoIdVersion *, const char*);
SOAP_FMAC3 contest25__QsoIdVersion * SOAP_FMAC4 soap_in_contest25__QsoIdVersion(struct soap*, const char*, contest25__QsoIdVersion *, const char*);
SOAP_FMAC1 contest25__QsoIdVersion * SOAP_FMAC2 soap_instantiate_contest25__QsoIdVersion(struct soap*, int, const char*, const char*, size_t*);

inline contest25__QsoIdVersion * soap_new_contest25__QsoIdVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest25__QsoIdVersion(soap, n, NULL, NULL, NULL);
}

inline contest25__QsoIdVersion * soap_new_req_contest25__QsoIdVersion(
	struct soap *soap,
	const std::string& id,
	const std::string& updatedBy,
	int version)
{
	contest25__QsoIdVersion *_p = soap_new_contest25__QsoIdVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__QsoIdVersion::id = id;
		_p->contest25__QsoIdVersion::updatedBy = updatedBy;
		_p->contest25__QsoIdVersion::version = version;
	}
	return _p;
}

inline contest25__QsoIdVersion * soap_new_set_contest25__QsoIdVersion(
	struct soap *soap,
	const std::string& id,
	const std::string& updatedBy,
	int version,
	char *__item1)
{
	contest25__QsoIdVersion *_p = soap_new_contest25__QsoIdVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__QsoIdVersion::id = id;
		_p->contest25__QsoIdVersion::updatedBy = updatedBy;
		_p->contest25__QsoIdVersion::version = version;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest25:QsoIdVersion", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest25__QsoIdVersion * SOAP_FMAC4 soap_get_contest25__QsoIdVersion(struct soap*, contest25__QsoIdVersion *, const char*, const char*);

inline int soap_read_contest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest25__QsoIdVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion_DEFINED
#define SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfQsoIdVersion(struct soap*, const char*, int, const contest25__ArrayOfQsoIdVersion *, const char*);
SOAP_FMAC3 contest25__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_in_contest25__ArrayOfQsoIdVersion(struct soap*, const char*, contest25__ArrayOfQsoIdVersion *, const char*);
SOAP_FMAC1 contest25__ArrayOfQsoIdVersion * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfQsoIdVersion(struct soap*, int, const char*, const char*, size_t*);

inline contest25__ArrayOfQsoIdVersion * soap_new_contest25__ArrayOfQsoIdVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest25__ArrayOfQsoIdVersion(soap, n, NULL, NULL, NULL);
}

inline contest25__ArrayOfQsoIdVersion * soap_new_req_contest25__ArrayOfQsoIdVersion(
	struct soap *soap)
{
	contest25__ArrayOfQsoIdVersion *_p = soap_new_contest25__ArrayOfQsoIdVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest25__ArrayOfQsoIdVersion * soap_new_set_contest25__ArrayOfQsoIdVersion(
	struct soap *soap,
	const std::vector<contest25__QsoIdVersion *> & QsoIdVersion,
	char *__item1)
{
	contest25__ArrayOfQsoIdVersion *_p = soap_new_contest25__ArrayOfQsoIdVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__ArrayOfQsoIdVersion::QsoIdVersion = QsoIdVersion;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest25:ArrayOfQsoIdVersion", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest25__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_get_contest25__ArrayOfQsoIdVersion(struct soap*, contest25__ArrayOfQsoIdVersion *, const char*, const char*);

inline int soap_read_contest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest25__ArrayOfQsoIdVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest25__LogSummary_DEFINED
#define SOAP_TYPE_C2_contest25__LogSummary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__LogSummary(struct soap*, const char*, int, const contest25__LogSummary *, const char*);
SOAP_FMAC3 contest25__LogSummary * SOAP_FMAC4 soap_in_contest25__LogSummary(struct soap*, const char*, contest25__LogSummary *, const char*);
SOAP_FMAC1 contest25__LogSummary * SOAP_FMAC2 soap_instantiate_contest25__LogSummary(struct soap*, int, const char*, const char*, size_t*);

inline contest25__LogSummary * soap_new_contest25__LogSummary(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest25__LogSummary(soap, n, NULL, NULL, NULL);
}

inline contest25__LogSummary * soap_new_req_contest25__LogSummary(
	struct soap *soap,
	int logState,
	contest25__ArrayOfQsoIdVersion *logSummaryIds)
{
	contest25__LogSummary *_p = soap_new_contest25__LogSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__LogSummary::logState = logState;
		_p->contest25__LogSummary::logSummaryIds = logSummaryIds;
	}
	return _p;
}

inline contest25__LogSummary * soap_new_set_contest25__LogSummary(
	struct soap *soap,
	int logState,
	contest25__ArrayOfQsoIdVersion *logSummaryIds,
	char *__item1)
{
	contest25__LogSummary *_p = soap_new_contest25__LogSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__LogSummary::logState = logState;
		_p->contest25__LogSummary::logSummaryIds = logSummaryIds;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest25__LogSummary(struct soap *soap, contest25__LogSummary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest25:LogSummary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest25__LogSummary * SOAP_FMAC4 soap_get_contest25__LogSummary(struct soap*, contest25__LogSummary *, const char*, const char*);

inline int soap_read_contest25__LogSummary(struct soap *soap, contest25__LogSummary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest25__LogSummary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest25__QsoUpdate_DEFINED
#define SOAP_TYPE_C2_contest25__QsoUpdate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__QsoUpdate(struct soap*, const char*, int, const contest25__QsoUpdate *, const char*);
SOAP_FMAC3 contest25__QsoUpdate * SOAP_FMAC4 soap_in_contest25__QsoUpdate(struct soap*, const char*, contest25__QsoUpdate *, const char*);
SOAP_FMAC1 contest25__QsoUpdate * SOAP_FMAC2 soap_instantiate_contest25__QsoUpdate(struct soap*, int, const char*, const char*, size_t*);

inline contest25__QsoUpdate * soap_new_contest25__QsoUpdate(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest25__QsoUpdate(soap, n, NULL, NULL, NULL);
}

inline contest25__QsoUpdate * soap_new_req_contest25__QsoUpdate(
	struct soap *soap,
	int logState,
	contest25__ArrayOfQso *qsoArray)
{
	contest25__QsoUpdate *_p = soap_new_contest25__QsoUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__QsoUpdate::logState = logState;
		_p->contest25__QsoUpdate::qsoArray = qsoArray;
	}
	return _p;
}

inline contest25__QsoUpdate * soap_new_set_contest25__QsoUpdate(
	struct soap *soap,
	int logState,
	contest25__ArrayOfQso *qsoArray,
	char *__item1)
{
	contest25__QsoUpdate *_p = soap_new_contest25__QsoUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__QsoUpdate::logState = logState;
		_p->contest25__QsoUpdate::qsoArray = qsoArray;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest25:QsoUpdate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest25__QsoUpdate * SOAP_FMAC4 soap_get_contest25__QsoUpdate(struct soap*, contest25__QsoUpdate *, const char*, const char*);

inline int soap_read_contest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest25__QsoUpdate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest25__Qso_DEFINED
#define SOAP_TYPE_C2_contest25__Qso_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__Qso(struct soap*, const char*, int, const contest25__Qso *, const char*);
SOAP_FMAC3 contest25__Qso * SOAP_FMAC4 soap_in_contest25__Qso(struct soap*, const char*, contest25__Qso *, const char*);
SOAP_FMAC1 contest25__Qso * SOAP_FMAC2 soap_instantiate_contest25__Qso(struct soap*, int, const char*, const char*, size_t*);

inline contest25__Qso * soap_new_contest25__Qso(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest25__Qso(soap, n, NULL, NULL, NULL);
}

inline contest25__Qso * soap_new_req_contest25__Qso(
	struct soap *soap,
	int band,
	int dupe,
	const std::string& idKey,
	int mode,
	contest26__ArrayOfstring *qsoparts,
	double recvFreq,
	int serial,
	const std::string& station,
	int time64H,
	int time64L,
	const std::string& updatedBy,
	int version,
	double xmitFreq)
{
	contest25__Qso *_p = soap_new_contest25__Qso(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__Qso::band = band;
		_p->contest25__Qso::dupe = dupe;
		_p->contest25__Qso::idKey = idKey;
		_p->contest25__Qso::mode = mode;
		_p->contest25__Qso::qsoparts = qsoparts;
		_p->contest25__Qso::recvFreq = recvFreq;
		_p->contest25__Qso::serial = serial;
		_p->contest25__Qso::station = station;
		_p->contest25__Qso::time64H = time64H;
		_p->contest25__Qso::time64L = time64L;
		_p->contest25__Qso::updatedBy = updatedBy;
		_p->contest25__Qso::version = version;
		_p->contest25__Qso::xmitFreq = xmitFreq;
	}
	return _p;
}

inline contest25__Qso * soap_new_set_contest25__Qso(
	struct soap *soap,
	int band,
	int dupe,
	const std::string& idKey,
	int mode,
	contest26__ArrayOfstring *qsoparts,
	double recvFreq,
	int serial,
	const std::string& station,
	int time64H,
	int time64L,
	const std::string& updatedBy,
	int version,
	double xmitFreq,
	char *__item1)
{
	contest25__Qso *_p = soap_new_contest25__Qso(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__Qso::band = band;
		_p->contest25__Qso::dupe = dupe;
		_p->contest25__Qso::idKey = idKey;
		_p->contest25__Qso::mode = mode;
		_p->contest25__Qso::qsoparts = qsoparts;
		_p->contest25__Qso::recvFreq = recvFreq;
		_p->contest25__Qso::serial = serial;
		_p->contest25__Qso::station = station;
		_p->contest25__Qso::time64H = time64H;
		_p->contest25__Qso::time64L = time64L;
		_p->contest25__Qso::updatedBy = updatedBy;
		_p->contest25__Qso::version = version;
		_p->contest25__Qso::xmitFreq = xmitFreq;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest25__Qso(struct soap *soap, contest25__Qso const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest25:Qso", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest25__Qso * SOAP_FMAC4 soap_get_contest25__Qso(struct soap*, contest25__Qso *, const char*, const char*);

inline int soap_read_contest25__Qso(struct soap *soap, contest25__Qso *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest25__Qso(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest25__ArrayOfQso_DEFINED
#define SOAP_TYPE_C2_contest25__ArrayOfQso_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfQso(struct soap*, const char*, int, const contest25__ArrayOfQso *, const char*);
SOAP_FMAC3 contest25__ArrayOfQso * SOAP_FMAC4 soap_in_contest25__ArrayOfQso(struct soap*, const char*, contest25__ArrayOfQso *, const char*);
SOAP_FMAC1 contest25__ArrayOfQso * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfQso(struct soap*, int, const char*, const char*, size_t*);

inline contest25__ArrayOfQso * soap_new_contest25__ArrayOfQso(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest25__ArrayOfQso(soap, n, NULL, NULL, NULL);
}

inline contest25__ArrayOfQso * soap_new_req_contest25__ArrayOfQso(
	struct soap *soap)
{
	contest25__ArrayOfQso *_p = soap_new_contest25__ArrayOfQso(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest25__ArrayOfQso * soap_new_set_contest25__ArrayOfQso(
	struct soap *soap,
	const std::vector<contest25__Qso *> & Qso,
	char *__item1)
{
	contest25__ArrayOfQso *_p = soap_new_contest25__ArrayOfQso(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest25__ArrayOfQso::Qso = Qso;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest25:ArrayOfQso", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest25__ArrayOfQso * SOAP_FMAC4 soap_get_contest25__ArrayOfQso(struct soap*, contest25__ArrayOfQso *, const char*, const char*);

inline int soap_read_contest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest25__ArrayOfQso(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest26__ArrayOfint_DEFINED
#define SOAP_TYPE_C2_contest26__ArrayOfint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest26__ArrayOfint(struct soap*, const char*, int, const contest26__ArrayOfint *, const char*);
SOAP_FMAC3 contest26__ArrayOfint * SOAP_FMAC4 soap_in_contest26__ArrayOfint(struct soap*, const char*, contest26__ArrayOfint *, const char*);
SOAP_FMAC1 contest26__ArrayOfint * SOAP_FMAC2 soap_instantiate_contest26__ArrayOfint(struct soap*, int, const char*, const char*, size_t*);

inline contest26__ArrayOfint * soap_new_contest26__ArrayOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest26__ArrayOfint(soap, n, NULL, NULL, NULL);
}

inline contest26__ArrayOfint * soap_new_req_contest26__ArrayOfint(
	struct soap *soap)
{
	contest26__ArrayOfint *_p = soap_new_contest26__ArrayOfint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest26__ArrayOfint * soap_new_set_contest26__ArrayOfint(
	struct soap *soap,
	const std::vector<int> & int_,
	char *__item1)
{
	contest26__ArrayOfint *_p = soap_new_contest26__ArrayOfint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest26__ArrayOfint::int_ = int_;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest26:ArrayOfint", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest26__ArrayOfint * SOAP_FMAC4 soap_get_contest26__ArrayOfint(struct soap*, contest26__ArrayOfint *, const char*, const char*);

inline int soap_read_contest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest26__ArrayOfint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_contest26__ArrayOfstring_DEFINED
#define SOAP_TYPE_C2_contest26__ArrayOfstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest26__ArrayOfstring(struct soap*, const char*, int, const contest26__ArrayOfstring *, const char*);
SOAP_FMAC3 contest26__ArrayOfstring * SOAP_FMAC4 soap_in_contest26__ArrayOfstring(struct soap*, const char*, contest26__ArrayOfstring *, const char*);
SOAP_FMAC1 contest26__ArrayOfstring * SOAP_FMAC2 soap_instantiate_contest26__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline contest26__ArrayOfstring * soap_new_contest26__ArrayOfstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest26__ArrayOfstring(soap, n, NULL, NULL, NULL);
}

inline contest26__ArrayOfstring * soap_new_req_contest26__ArrayOfstring(
	struct soap *soap)
{
	contest26__ArrayOfstring *_p = soap_new_contest26__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest26__ArrayOfstring * soap_new_set_contest26__ArrayOfstring(
	struct soap *soap,
	const std::vector<std::string> & string,
	char *__item1)
{
	contest26__ArrayOfstring *_p = soap_new_contest26__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest26__ArrayOfstring::string = string;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_contest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest26:ArrayOfstring", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest26__ArrayOfstring * SOAP_FMAC4 soap_get_contest26__ArrayOfstring(struct soap*, contest26__ArrayOfstring *, const char*, const char*);

inline int soap_read_contest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest26__ArrayOfstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedShort_DEFINED
#define SOAP_TYPE_C2_xsd__unsignedShort_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const xsd__unsignedShort *, const char*);
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, xsd__unsignedShort *, const char*);
SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedShort * soap_new_xsd__unsignedShort(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedShort * soap_new_req_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
	}
	return _p;
}

inline xsd__unsignedShort * soap_new_set_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item,
	char *__item1)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, xsd__unsignedShort *, const char*, const char*);

inline int soap_read_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedLong_DEFINED
#define SOAP_TYPE_C2_xsd__unsignedLong_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);
SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
	}
	return _p;
}

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item,
	char *__item1)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

inline int soap_read_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedLong(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedInt_DEFINED
#define SOAP_TYPE_C2_xsd__unsignedInt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const xsd__unsignedInt *, const char*);
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, xsd__unsignedInt *, const char*);
SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedInt * soap_new_xsd__unsignedInt(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedInt * soap_new_req_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
	}
	return _p;
}

inline xsd__unsignedInt * soap_new_set_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item,
	char *__item1)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, xsd__unsignedInt *, const char*, const char*);

inline int soap_read_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedByte__DEFINED
#define SOAP_TYPE_C2_xsd__unsignedByte__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap*, const char*, int, const xsd__unsignedByte_ *, const char*);
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap*, const char*, xsd__unsignedByte_ *, const char*);
SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedByte_ * soap_new_xsd__unsignedByte_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedByte_(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedByte_ * soap_new_req_xsd__unsignedByte_(
	struct soap *soap,
	unsigned char __item)
{
	xsd__unsignedByte_ *_p = soap_new_xsd__unsignedByte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedByte_::__item = __item;
	}
	return _p;
}

inline xsd__unsignedByte_ * soap_new_set_xsd__unsignedByte_(
	struct soap *soap,
	unsigned char __item,
	char *__item1)
{
	xsd__unsignedByte_ *_p = soap_new_xsd__unsignedByte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedByte_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap*, xsd__unsignedByte_ *, const char*, const char*);

inline int soap_read_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedByte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__string_DEFINED
#define SOAP_TYPE_C2_xsd__string_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);
SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

inline xsd__string * soap_new_req_xsd__string(
	struct soap *soap,
	const std::string& __item)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
	}
	return _p;
}

inline xsd__string * soap_new_set_xsd__string(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__string(struct soap *soap, xsd__string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, xsd__string *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__short_DEFINED
#define SOAP_TYPE_C2_xsd__short_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap*, const char*, int, const xsd__short *, const char*);
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap*, const char*, xsd__short *, const char*);
SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap*, int, const char*, const char*, size_t*);

inline xsd__short * soap_new_xsd__short(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__short(soap, n, NULL, NULL, NULL);
}

inline xsd__short * soap_new_req_xsd__short(
	struct soap *soap,
	short __item)
{
	xsd__short *_p = soap_new_xsd__short(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__short::__item = __item;
	}
	return _p;
}

inline xsd__short * soap_new_set_xsd__short(
	struct soap *soap,
	short __item,
	char *__item1)
{
	xsd__short *_p = soap_new_xsd__short(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__short::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__short(struct soap *soap, xsd__short const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap*, xsd__short *, const char*, const char*);

inline int soap_read_xsd__short(struct soap *soap, xsd__short *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__long_DEFINED
#define SOAP_TYPE_C2_xsd__long_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);
SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL);
}

inline xsd__long * soap_new_req_xsd__long(
	struct soap *soap,
	LONG64 __item)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
	}
	return _p;
}

inline xsd__long * soap_new_set_xsd__long(
	struct soap *soap,
	LONG64 __item,
	char *__item1)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__long(struct soap *soap, xsd__long const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

inline int soap_read_xsd__long(struct soap *soap, xsd__long *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__int_DEFINED
#define SOAP_TYPE_C2_xsd__int_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);
SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

inline xsd__int * soap_new_req_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline xsd__int * soap_new_set_xsd__int(
	struct soap *soap,
	int __item,
	char *__item1)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__int(struct soap *soap, xsd__int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, xsd__int *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__float_DEFINED
#define SOAP_TYPE_C2_xsd__float_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);
SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL);
}

inline xsd__float * soap_new_req_xsd__float(
	struct soap *soap,
	float __item)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
	}
	return _p;
}

inline xsd__float * soap_new_set_xsd__float(
	struct soap *soap,
	float __item,
	char *__item1)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__float(struct soap *soap, xsd__float const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

inline int soap_read_xsd__float(struct soap *soap, xsd__float *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__duration__DEFINED
#define SOAP_TYPE_C2_xsd__duration__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);
SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL);
}

inline xsd__duration_ * soap_new_req_xsd__duration_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
	}
	return _p;
}

inline xsd__duration_ * soap_new_set_xsd__duration_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__duration_(struct soap *soap, xsd__duration_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

inline int soap_read_xsd__duration_(struct soap *soap, xsd__duration_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__duration_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__duration_DEFINED
#define SOAP_TYPE_C2_xsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__duration(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::string *);

#define soap_xsd__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__duration soap_instantiate_std__string


#define soap_new_xsd__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__double_DEFINED
#define SOAP_TYPE_C2_xsd__double_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);
SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL);
}

inline xsd__double * soap_new_req_xsd__double(
	struct soap *soap,
	double __item)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
	}
	return _p;
}

inline xsd__double * soap_new_set_xsd__double(
	struct soap *soap,
	double __item,
	char *__item1)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__double(struct soap *soap, xsd__double const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

inline int soap_read_xsd__double(struct soap *soap, xsd__double *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__decimal__DEFINED
#define SOAP_TYPE_C2_xsd__decimal__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap*, const char*, int, const xsd__decimal_ *, const char*);
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap*, const char*, xsd__decimal_ *, const char*);
SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__decimal_ * soap_new_xsd__decimal_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, NULL);
}

inline xsd__decimal_ * soap_new_req_xsd__decimal_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__decimal_ *_p = soap_new_xsd__decimal_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__decimal_::__item = __item;
	}
	return _p;
}

inline xsd__decimal_ * soap_new_set_xsd__decimal_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__decimal_ *_p = soap_new_xsd__decimal_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__decimal_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__decimal_(struct soap *soap, xsd__decimal_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap*, xsd__decimal_ *, const char*, const char*);

inline int soap_read_xsd__decimal_(struct soap *soap, xsd__decimal_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__decimal_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__decimal_DEFINED
#define SOAP_TYPE_C2_xsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__decimal(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__dateTime_DEFINED
#define SOAP_TYPE_C2_xsd__dateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);
SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline xsd__dateTime * soap_new_req_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline xsd__dateTime * soap_new_set_xsd__dateTime(
	struct soap *soap,
	time_t __item,
	char *__item1)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__dateTime(struct soap *soap, xsd__dateTime const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__byte__DEFINED
#define SOAP_TYPE_C2_xsd__byte__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap*, const char*, int, const xsd__byte_ *, const char*);
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap*, const char*, xsd__byte_ *, const char*);
SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__byte_ * soap_new_xsd__byte_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__byte_(soap, n, NULL, NULL, NULL);
}

inline xsd__byte_ * soap_new_req_xsd__byte_(
	struct soap *soap,
	char __item)
{
	xsd__byte_ *_p = soap_new_xsd__byte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__byte_::__item = __item;
	}
	return _p;
}

inline xsd__byte_ * soap_new_set_xsd__byte_(
	struct soap *soap,
	char __item,
	char *__item1)
{
	xsd__byte_ *_p = soap_new_xsd__byte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__byte_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__byte_(struct soap *soap, xsd__byte_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap*, xsd__byte_ *, const char*, const char*);

inline int soap_read_xsd__byte_(struct soap *soap, xsd__byte_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__byte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__boolean_DEFINED
#define SOAP_TYPE_C2_xsd__boolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);
SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);
}

inline xsd__boolean * soap_new_req_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline xsd__boolean * soap_new_set_xsd__boolean(
	struct soap *soap,
	bool __item,
	char *__item1)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__boolean(struct soap *soap, xsd__boolean const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__base64Binary__DEFINED
#define SOAP_TYPE_C2_xsd__base64Binary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);
SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
	}
	return _p;
}

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item,
	char *__item1)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

inline int soap_read_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__anyURI__DEFINED
#define SOAP_TYPE_C2_xsd__anyURI__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);
SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL);
}

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
	}
	return _p;
}

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__anyURI_(struct soap *soap, xsd__anyURI_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

inline int soap_read_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyURI_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__anyURI_DEFINED
#define SOAP_TYPE_C2_xsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__QName__DEFINED
#define SOAP_TYPE_C2_xsd__QName__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);
SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL);
}

inline xsd__QName_ * soap_new_req_xsd__QName_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__QName_ *_p = soap_new_xsd__QName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName_::__item = __item;
	}
	return _p;
}

inline xsd__QName_ * soap_new_set_xsd__QName_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__QName_ *_p = soap_new_xsd__QName_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__QName_(struct soap *soap, xsd__QName_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

inline int soap_read_xsd__QName_(struct soap *soap, xsd__QName_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__QName_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__IDREF__DEFINED
#define SOAP_TYPE_C2_xsd__IDREF__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap*, const char*, int, const xsd__IDREF_ *, const char*);
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap*, const char*, xsd__IDREF_ *, const char*);
SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__IDREF_ * soap_new_xsd__IDREF_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__IDREF_(soap, n, NULL, NULL, NULL);
}

inline xsd__IDREF_ * soap_new_req_xsd__IDREF_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__IDREF_ *_p = soap_new_xsd__IDREF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__IDREF_::__item = __item;
	}
	return _p;
}

inline xsd__IDREF_ * soap_new_set_xsd__IDREF_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__IDREF_ *_p = soap_new_xsd__IDREF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__IDREF_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__IDREF_(struct soap *soap, xsd__IDREF_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:IDREF", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap*, xsd__IDREF_ *, const char*, const char*);

inline int soap_read_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__IDREF_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__IDREF_DEFINED
#define SOAP_TYPE_C2_xsd__IDREF_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__IDREF(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap*, const std::string *);

#define soap_xsd__IDREF2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__IDREF(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__IDREF soap_instantiate_std__string


#define soap_new_xsd__IDREF soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__IDREF(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__IDREF(soap, p, "xsd:IDREF", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__IDREF(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__IDREF(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__ID__DEFINED
#define SOAP_TYPE_C2_xsd__ID__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap*, const char*, int, const xsd__ID_ *, const char*);
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap*, const char*, xsd__ID_ *, const char*);
SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__ID_ * soap_new_xsd__ID_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, NULL);
}

inline xsd__ID_ * soap_new_req_xsd__ID_(
	struct soap *soap,
	const std::string& __item)
{
	xsd__ID_ *_p = soap_new_xsd__ID_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__ID_::__item = __item;
	}
	return _p;
}

inline xsd__ID_ * soap_new_set_xsd__ID_(
	struct soap *soap,
	const std::string& __item,
	char *__item1)
{
	xsd__ID_ *_p = soap_new_xsd__ID_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__ID_::__item = __item;
		_p->xsd__anyType::__item = __item1;
	}
	return _p;
}

inline int soap_write_xsd__ID_(struct soap *soap, xsd__ID_ const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:ID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap*, xsd__ID_ *, const char*, const char*);

inline int soap_read_xsd__ID_(struct soap *soap, xsd__ID_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__ID_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__ID_DEFINED
#define SOAP_TYPE_C2_xsd__ID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__ID(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, const std::string *);

#define soap_xsd__ID2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__ID(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__ID soap_instantiate_std__string


#define soap_new_xsd__ID soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__ID(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__ID(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__ID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__base64Binary_DEFINED
#define SOAP_TYPE_C2_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__QName_DEFINED
#define SOAP_TYPE_C2_xsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);

#define soap_xsd__QName2s(soap, a) soap_QName2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_std__string_DEFINED
#define SOAP_TYPE_C2_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_xsd__anyType_DEFINED
#define SOAP_TYPE_C2_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C2_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_C2_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C2_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_C2_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C2_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_C2_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C2_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_C2_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C2_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_C2_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_C2___contest23__ExchangeFrequencies_DEFINED
#define SOAP_TYPE_C2___contest23__ExchangeFrequencies_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__ExchangeFrequencies(struct soap*, struct __contest23__ExchangeFrequencies *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__ExchangeFrequencies(struct soap*, const struct __contest23__ExchangeFrequencies *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__ExchangeFrequencies(struct soap*, const char*, int, const struct __contest23__ExchangeFrequencies *, const char*);
SOAP_FMAC3 struct __contest23__ExchangeFrequencies * SOAP_FMAC4 soap_in___contest23__ExchangeFrequencies(struct soap*, const char*, struct __contest23__ExchangeFrequencies *, const char*);
SOAP_FMAC1 struct __contest23__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate___contest23__ExchangeFrequencies(struct soap*, int, const char*, const char*, size_t*);

inline struct __contest23__ExchangeFrequencies * soap_new___contest23__ExchangeFrequencies(struct soap *soap, int n = -1)
{
	return soap_instantiate___contest23__ExchangeFrequencies(soap, n, NULL, NULL, NULL);
}

inline struct __contest23__ExchangeFrequencies * soap_new_req___contest23__ExchangeFrequencies(
	struct soap *soap)
{
	struct __contest23__ExchangeFrequencies *_p = soap_new___contest23__ExchangeFrequencies(soap);
	if (_p)
	{	soap_default___contest23__ExchangeFrequencies(soap, _p);
	}
	return _p;
}

inline struct __contest23__ExchangeFrequencies * soap_new_set___contest23__ExchangeFrequencies(
	struct soap *soap,
	_contest23__ExchangeFrequencies *contest23__ExchangeFrequencies)
{
	struct __contest23__ExchangeFrequencies *_p = soap_new___contest23__ExchangeFrequencies(soap);
	if (_p)
	{	soap_default___contest23__ExchangeFrequencies(soap, _p);
		_p->contest23__ExchangeFrequencies = contest23__ExchangeFrequencies;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__ExchangeFrequencies(struct soap*, const struct __contest23__ExchangeFrequencies *, const char*, const char*);

inline int soap_write___contest23__ExchangeFrequencies(struct soap *soap, struct __contest23__ExchangeFrequencies const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___contest23__ExchangeFrequencies(soap, p), 0) || soap_put___contest23__ExchangeFrequencies(soap, p, "-contest23:ExchangeFrequencies", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __contest23__ExchangeFrequencies * SOAP_FMAC4 soap_get___contest23__ExchangeFrequencies(struct soap*, struct __contest23__ExchangeFrequencies *, const char*, const char*);

inline int soap_read___contest23__ExchangeFrequencies(struct soap *soap, struct __contest23__ExchangeFrequencies *p)
{
	if (p)
	{	soap_default___contest23__ExchangeFrequencies(soap, p);
		if (soap_begin_recv(soap) || soap_get___contest23__ExchangeFrequencies(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2___contest23__ColumnNamesToIndices_DEFINED
#define SOAP_TYPE_C2___contest23__ColumnNamesToIndices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__ColumnNamesToIndices(struct soap*, struct __contest23__ColumnNamesToIndices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__ColumnNamesToIndices(struct soap*, const struct __contest23__ColumnNamesToIndices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__ColumnNamesToIndices(struct soap*, const char*, int, const struct __contest23__ColumnNamesToIndices *, const char*);
SOAP_FMAC3 struct __contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_in___contest23__ColumnNamesToIndices(struct soap*, const char*, struct __contest23__ColumnNamesToIndices *, const char*);
SOAP_FMAC1 struct __contest23__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate___contest23__ColumnNamesToIndices(struct soap*, int, const char*, const char*, size_t*);

inline struct __contest23__ColumnNamesToIndices * soap_new___contest23__ColumnNamesToIndices(struct soap *soap, int n = -1)
{
	return soap_instantiate___contest23__ColumnNamesToIndices(soap, n, NULL, NULL, NULL);
}

inline struct __contest23__ColumnNamesToIndices * soap_new_req___contest23__ColumnNamesToIndices(
	struct soap *soap)
{
	struct __contest23__ColumnNamesToIndices *_p = soap_new___contest23__ColumnNamesToIndices(soap);
	if (_p)
	{	soap_default___contest23__ColumnNamesToIndices(soap, _p);
	}
	return _p;
}

inline struct __contest23__ColumnNamesToIndices * soap_new_set___contest23__ColumnNamesToIndices(
	struct soap *soap,
	_contest23__ColumnNamesToIndices *contest23__ColumnNamesToIndices)
{
	struct __contest23__ColumnNamesToIndices *_p = soap_new___contest23__ColumnNamesToIndices(soap);
	if (_p)
	{	soap_default___contest23__ColumnNamesToIndices(soap, _p);
		_p->contest23__ColumnNamesToIndices = contest23__ColumnNamesToIndices;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__ColumnNamesToIndices(struct soap*, const struct __contest23__ColumnNamesToIndices *, const char*, const char*);

inline int soap_write___contest23__ColumnNamesToIndices(struct soap *soap, struct __contest23__ColumnNamesToIndices const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___contest23__ColumnNamesToIndices(soap, p), 0) || soap_put___contest23__ColumnNamesToIndices(soap, p, "-contest23:ColumnNamesToIndices", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_get___contest23__ColumnNamesToIndices(struct soap*, struct __contest23__ColumnNamesToIndices *, const char*, const char*);

inline int soap_read___contest23__ColumnNamesToIndices(struct soap *soap, struct __contest23__ColumnNamesToIndices *p)
{
	if (p)
	{	soap_default___contest23__ColumnNamesToIndices(soap, p);
		if (soap_begin_recv(soap) || soap_get___contest23__ColumnNamesToIndices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2___contest23__getQsosByKeyArray_DEFINED
#define SOAP_TYPE_C2___contest23__getQsosByKeyArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__getQsosByKeyArray(struct soap*, struct __contest23__getQsosByKeyArray *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__getQsosByKeyArray(struct soap*, const struct __contest23__getQsosByKeyArray *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__getQsosByKeyArray(struct soap*, const char*, int, const struct __contest23__getQsosByKeyArray *, const char*);
SOAP_FMAC3 struct __contest23__getQsosByKeyArray * SOAP_FMAC4 soap_in___contest23__getQsosByKeyArray(struct soap*, const char*, struct __contest23__getQsosByKeyArray *, const char*);
SOAP_FMAC1 struct __contest23__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate___contest23__getQsosByKeyArray(struct soap*, int, const char*, const char*, size_t*);

inline struct __contest23__getQsosByKeyArray * soap_new___contest23__getQsosByKeyArray(struct soap *soap, int n = -1)
{
	return soap_instantiate___contest23__getQsosByKeyArray(soap, n, NULL, NULL, NULL);
}

inline struct __contest23__getQsosByKeyArray * soap_new_req___contest23__getQsosByKeyArray(
	struct soap *soap)
{
	struct __contest23__getQsosByKeyArray *_p = soap_new___contest23__getQsosByKeyArray(soap);
	if (_p)
	{	soap_default___contest23__getQsosByKeyArray(soap, _p);
	}
	return _p;
}

inline struct __contest23__getQsosByKeyArray * soap_new_set___contest23__getQsosByKeyArray(
	struct soap *soap,
	_contest23__getQsosByKeyArray *contest23__getQsosByKeyArray)
{
	struct __contest23__getQsosByKeyArray *_p = soap_new___contest23__getQsosByKeyArray(soap);
	if (_p)
	{	soap_default___contest23__getQsosByKeyArray(soap, _p);
		_p->contest23__getQsosByKeyArray = contest23__getQsosByKeyArray;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__getQsosByKeyArray(struct soap*, const struct __contest23__getQsosByKeyArray *, const char*, const char*);

inline int soap_write___contest23__getQsosByKeyArray(struct soap *soap, struct __contest23__getQsosByKeyArray const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___contest23__getQsosByKeyArray(soap, p), 0) || soap_put___contest23__getQsosByKeyArray(soap, p, "-contest23:getQsosByKeyArray", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __contest23__getQsosByKeyArray * SOAP_FMAC4 soap_get___contest23__getQsosByKeyArray(struct soap*, struct __contest23__getQsosByKeyArray *, const char*, const char*);

inline int soap_read___contest23__getQsosByKeyArray(struct soap *soap, struct __contest23__getQsosByKeyArray *p)
{
	if (p)
	{	soap_default___contest23__getQsosByKeyArray(soap, p);
		if (soap_begin_recv(soap) || soap_get___contest23__getQsosByKeyArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2___contest23__AddAndGetLogSummary_DEFINED
#define SOAP_TYPE_C2___contest23__AddAndGetLogSummary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__AddAndGetLogSummary(struct soap*, struct __contest23__AddAndGetLogSummary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__AddAndGetLogSummary(struct soap*, const struct __contest23__AddAndGetLogSummary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__AddAndGetLogSummary(struct soap*, const char*, int, const struct __contest23__AddAndGetLogSummary *, const char*);
SOAP_FMAC3 struct __contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_in___contest23__AddAndGetLogSummary(struct soap*, const char*, struct __contest23__AddAndGetLogSummary *, const char*);
SOAP_FMAC1 struct __contest23__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate___contest23__AddAndGetLogSummary(struct soap*, int, const char*, const char*, size_t*);

inline struct __contest23__AddAndGetLogSummary * soap_new___contest23__AddAndGetLogSummary(struct soap *soap, int n = -1)
{
	return soap_instantiate___contest23__AddAndGetLogSummary(soap, n, NULL, NULL, NULL);
}

inline struct __contest23__AddAndGetLogSummary * soap_new_req___contest23__AddAndGetLogSummary(
	struct soap *soap)
{
	struct __contest23__AddAndGetLogSummary *_p = soap_new___contest23__AddAndGetLogSummary(soap);
	if (_p)
	{	soap_default___contest23__AddAndGetLogSummary(soap, _p);
	}
	return _p;
}

inline struct __contest23__AddAndGetLogSummary * soap_new_set___contest23__AddAndGetLogSummary(
	struct soap *soap,
	_contest23__AddAndGetLogSummary *contest23__AddAndGetLogSummary)
{
	struct __contest23__AddAndGetLogSummary *_p = soap_new___contest23__AddAndGetLogSummary(soap);
	if (_p)
	{	soap_default___contest23__AddAndGetLogSummary(soap, _p);
		_p->contest23__AddAndGetLogSummary = contest23__AddAndGetLogSummary;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__AddAndGetLogSummary(struct soap*, const struct __contest23__AddAndGetLogSummary *, const char*, const char*);

inline int soap_write___contest23__AddAndGetLogSummary(struct soap *soap, struct __contest23__AddAndGetLogSummary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___contest23__AddAndGetLogSummary(soap, p), 0) || soap_put___contest23__AddAndGetLogSummary(soap, p, "-contest23:AddAndGetLogSummary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_get___contest23__AddAndGetLogSummary(struct soap*, struct __contest23__AddAndGetLogSummary *, const char*, const char*);

inline int soap_read___contest23__AddAndGetLogSummary(struct soap *soap, struct __contest23__AddAndGetLogSummary *p)
{
	if (p)
	{	soap_default___contest23__AddAndGetLogSummary(soap, p);
		if (soap_begin_recv(soap) || soap_get___contest23__AddAndGetLogSummary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2___contest23__addAndGetQsos_DEFINED
#define SOAP_TYPE_C2___contest23__addAndGetQsos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__addAndGetQsos(struct soap*, struct __contest23__addAndGetQsos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__addAndGetQsos(struct soap*, const struct __contest23__addAndGetQsos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__addAndGetQsos(struct soap*, const char*, int, const struct __contest23__addAndGetQsos *, const char*);
SOAP_FMAC3 struct __contest23__addAndGetQsos * SOAP_FMAC4 soap_in___contest23__addAndGetQsos(struct soap*, const char*, struct __contest23__addAndGetQsos *, const char*);
SOAP_FMAC1 struct __contest23__addAndGetQsos * SOAP_FMAC2 soap_instantiate___contest23__addAndGetQsos(struct soap*, int, const char*, const char*, size_t*);

inline struct __contest23__addAndGetQsos * soap_new___contest23__addAndGetQsos(struct soap *soap, int n = -1)
{
	return soap_instantiate___contest23__addAndGetQsos(soap, n, NULL, NULL, NULL);
}

inline struct __contest23__addAndGetQsos * soap_new_req___contest23__addAndGetQsos(
	struct soap *soap)
{
	struct __contest23__addAndGetQsos *_p = soap_new___contest23__addAndGetQsos(soap);
	if (_p)
	{	soap_default___contest23__addAndGetQsos(soap, _p);
	}
	return _p;
}

inline struct __contest23__addAndGetQsos * soap_new_set___contest23__addAndGetQsos(
	struct soap *soap,
	_contest23__addAndGetQsos *contest23__addAndGetQsos)
{
	struct __contest23__addAndGetQsos *_p = soap_new___contest23__addAndGetQsos(soap);
	if (_p)
	{	soap_default___contest23__addAndGetQsos(soap, _p);
		_p->contest23__addAndGetQsos = contest23__addAndGetQsos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__addAndGetQsos(struct soap*, const struct __contest23__addAndGetQsos *, const char*, const char*);

inline int soap_write___contest23__addAndGetQsos(struct soap *soap, struct __contest23__addAndGetQsos const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___contest23__addAndGetQsos(soap, p), 0) || soap_put___contest23__addAndGetQsos(soap, p, "-contest23:addAndGetQsos", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __contest23__addAndGetQsos * SOAP_FMAC4 soap_get___contest23__addAndGetQsos(struct soap*, struct __contest23__addAndGetQsos *, const char*, const char*);

inline int soap_read___contest23__addAndGetQsos(struct soap *soap, struct __contest23__addAndGetQsos *p)
{
	if (p)
	{	soap_default___contest23__addAndGetQsos(soap, p);
		if (soap_begin_recv(soap) || soap_get___contest23__addAndGetQsos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2___contest23__GetSessionId_DEFINED
#define SOAP_TYPE_C2___contest23__GetSessionId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__GetSessionId(struct soap*, struct __contest23__GetSessionId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__GetSessionId(struct soap*, const struct __contest23__GetSessionId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__GetSessionId(struct soap*, const char*, int, const struct __contest23__GetSessionId *, const char*);
SOAP_FMAC3 struct __contest23__GetSessionId * SOAP_FMAC4 soap_in___contest23__GetSessionId(struct soap*, const char*, struct __contest23__GetSessionId *, const char*);
SOAP_FMAC1 struct __contest23__GetSessionId * SOAP_FMAC2 soap_instantiate___contest23__GetSessionId(struct soap*, int, const char*, const char*, size_t*);

inline struct __contest23__GetSessionId * soap_new___contest23__GetSessionId(struct soap *soap, int n = -1)
{
	return soap_instantiate___contest23__GetSessionId(soap, n, NULL, NULL, NULL);
}

inline struct __contest23__GetSessionId * soap_new_req___contest23__GetSessionId(
	struct soap *soap)
{
	struct __contest23__GetSessionId *_p = soap_new___contest23__GetSessionId(soap);
	if (_p)
	{	soap_default___contest23__GetSessionId(soap, _p);
	}
	return _p;
}

inline struct __contest23__GetSessionId * soap_new_set___contest23__GetSessionId(
	struct soap *soap,
	_contest23__GetSessionId *contest23__GetSessionId)
{
	struct __contest23__GetSessionId *_p = soap_new___contest23__GetSessionId(soap);
	if (_p)
	{	soap_default___contest23__GetSessionId(soap, _p);
		_p->contest23__GetSessionId = contest23__GetSessionId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__GetSessionId(struct soap*, const struct __contest23__GetSessionId *, const char*, const char*);

inline int soap_write___contest23__GetSessionId(struct soap *soap, struct __contest23__GetSessionId const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___contest23__GetSessionId(soap, p), 0) || soap_put___contest23__GetSessionId(soap, p, "-contest23:GetSessionId", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __contest23__GetSessionId * SOAP_FMAC4 soap_get___contest23__GetSessionId(struct soap*, struct __contest23__GetSessionId *, const char*, const char*);

inline int soap_read___contest23__GetSessionId(struct soap *soap, struct __contest23__GetSessionId *p)
{
	if (p)
	{	soap_default___contest23__GetSessionId(soap, p);
		if (soap_begin_recv(soap) || soap_get___contest23__GetSessionId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C2_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_C2_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C2_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_C2_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C2_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_C2_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies_DEFINED
#define SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__ExchangeFrequencies(struct soap*, _contest23__ExchangeFrequencies *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__ExchangeFrequencies(struct soap*, const char *, int, _contest23__ExchangeFrequencies *const*, const char *);
SOAP_FMAC3 _contest23__ExchangeFrequencies ** SOAP_FMAC4 soap_in_PointerTo_contest23__ExchangeFrequencies(struct soap*, const char*, _contest23__ExchangeFrequencies **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__ExchangeFrequencies(struct soap*, _contest23__ExchangeFrequencies *const*, const char*, const char*);
SOAP_FMAC3 _contest23__ExchangeFrequencies ** SOAP_FMAC4 soap_get_PointerTo_contest23__ExchangeFrequencies(struct soap*, _contest23__ExchangeFrequencies **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices_DEFINED
#define SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__ColumnNamesToIndices(struct soap*, _contest23__ColumnNamesToIndices *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__ColumnNamesToIndices(struct soap*, const char *, int, _contest23__ColumnNamesToIndices *const*, const char *);
SOAP_FMAC3 _contest23__ColumnNamesToIndices ** SOAP_FMAC4 soap_in_PointerTo_contest23__ColumnNamesToIndices(struct soap*, const char*, _contest23__ColumnNamesToIndices **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__ColumnNamesToIndices(struct soap*, _contest23__ColumnNamesToIndices *const*, const char*, const char*);
SOAP_FMAC3 _contest23__ColumnNamesToIndices ** SOAP_FMAC4 soap_get_PointerTo_contest23__ColumnNamesToIndices(struct soap*, _contest23__ColumnNamesToIndices **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray_DEFINED
#define SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__getQsosByKeyArray(struct soap*, _contest23__getQsosByKeyArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__getQsosByKeyArray(struct soap*, const char *, int, _contest23__getQsosByKeyArray *const*, const char *);
SOAP_FMAC3 _contest23__getQsosByKeyArray ** SOAP_FMAC4 soap_in_PointerTo_contest23__getQsosByKeyArray(struct soap*, const char*, _contest23__getQsosByKeyArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__getQsosByKeyArray(struct soap*, _contest23__getQsosByKeyArray *const*, const char*, const char*);
SOAP_FMAC3 _contest23__getQsosByKeyArray ** SOAP_FMAC4 soap_get_PointerTo_contest23__getQsosByKeyArray(struct soap*, _contest23__getQsosByKeyArray **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary_DEFINED
#define SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__AddAndGetLogSummary(struct soap*, _contest23__AddAndGetLogSummary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__AddAndGetLogSummary(struct soap*, const char *, int, _contest23__AddAndGetLogSummary *const*, const char *);
SOAP_FMAC3 _contest23__AddAndGetLogSummary ** SOAP_FMAC4 soap_in_PointerTo_contest23__AddAndGetLogSummary(struct soap*, const char*, _contest23__AddAndGetLogSummary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__AddAndGetLogSummary(struct soap*, _contest23__AddAndGetLogSummary *const*, const char*, const char*);
SOAP_FMAC3 _contest23__AddAndGetLogSummary ** SOAP_FMAC4 soap_get_PointerTo_contest23__AddAndGetLogSummary(struct soap*, _contest23__AddAndGetLogSummary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos_DEFINED
#define SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__addAndGetQsos(struct soap*, _contest23__addAndGetQsos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__addAndGetQsos(struct soap*, const char *, int, _contest23__addAndGetQsos *const*, const char *);
SOAP_FMAC3 _contest23__addAndGetQsos ** SOAP_FMAC4 soap_in_PointerTo_contest23__addAndGetQsos(struct soap*, const char*, _contest23__addAndGetQsos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__addAndGetQsos(struct soap*, _contest23__addAndGetQsos *const*, const char*, const char*);
SOAP_FMAC3 _contest23__addAndGetQsos ** SOAP_FMAC4 soap_get_PointerTo_contest23__addAndGetQsos(struct soap*, _contest23__addAndGetQsos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTo_contest23__GetSessionId_DEFINED
#define SOAP_TYPE_C2_PointerTo_contest23__GetSessionId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__GetSessionId(struct soap*, _contest23__GetSessionId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__GetSessionId(struct soap*, const char *, int, _contest23__GetSessionId *const*, const char *);
SOAP_FMAC3 _contest23__GetSessionId ** SOAP_FMAC4 soap_in_PointerTo_contest23__GetSessionId(struct soap*, const char*, _contest23__GetSessionId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__GetSessionId(struct soap*, _contest23__GetSessionId *const*, const char*, const char*);
SOAP_FMAC3 _contest23__GetSessionId ** SOAP_FMAC4 soap_get_PointerTo_contest23__GetSessionId(struct soap*, _contest23__GetSessionId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency_DEFINED
#define SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfRigFrequency(struct soap*, contest25__ArrayOfRigFrequency *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfRigFrequency(struct soap*, const char *, int, contest25__ArrayOfRigFrequency *const*, const char *);
SOAP_FMAC3 contest25__ArrayOfRigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfRigFrequency(struct soap*, const char*, contest25__ArrayOfRigFrequency **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfRigFrequency(struct soap*, contest25__ArrayOfRigFrequency *const*, const char*, const char*);
SOAP_FMAC3 contest25__ArrayOfRigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfRigFrequency(struct soap*, contest25__ArrayOfRigFrequency **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest26__ArrayOfint_DEFINED
#define SOAP_TYPE_C2_PointerTocontest26__ArrayOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest26__ArrayOfint(struct soap*, contest26__ArrayOfint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest26__ArrayOfint(struct soap*, const char *, int, contest26__ArrayOfint *const*, const char *);
SOAP_FMAC3 contest26__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTocontest26__ArrayOfint(struct soap*, const char*, contest26__ArrayOfint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest26__ArrayOfint(struct soap*, contest26__ArrayOfint *const*, const char*, const char*);
SOAP_FMAC3 contest26__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTocontest26__ArrayOfint(struct soap*, contest26__ArrayOfint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest25__LogSummary_DEFINED
#define SOAP_TYPE_C2_PointerTocontest25__LogSummary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__LogSummary(struct soap*, contest25__LogSummary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__LogSummary(struct soap*, const char *, int, contest25__LogSummary *const*, const char *);
SOAP_FMAC3 contest25__LogSummary ** SOAP_FMAC4 soap_in_PointerTocontest25__LogSummary(struct soap*, const char*, contest25__LogSummary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__LogSummary(struct soap*, contest25__LogSummary *const*, const char*, const char*);
SOAP_FMAC3 contest25__LogSummary ** SOAP_FMAC4 soap_get_PointerTocontest25__LogSummary(struct soap*, contest25__LogSummary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest25__QsoUpdate_DEFINED
#define SOAP_TYPE_C2_PointerTocontest25__QsoUpdate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__QsoUpdate(struct soap*, contest25__QsoUpdate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__QsoUpdate(struct soap*, const char *, int, contest25__QsoUpdate *const*, const char *);
SOAP_FMAC3 contest25__QsoUpdate ** SOAP_FMAC4 soap_in_PointerTocontest25__QsoUpdate(struct soap*, const char*, contest25__QsoUpdate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__QsoUpdate(struct soap*, contest25__QsoUpdate *const*, const char*, const char*);
SOAP_FMAC3 contest25__QsoUpdate ** SOAP_FMAC4 soap_get_PointerTocontest25__QsoUpdate(struct soap*, contest25__QsoUpdate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest25__RigFrequency_DEFINED
#define SOAP_TYPE_C2_PointerTocontest25__RigFrequency_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__RigFrequency(struct soap*, contest25__RigFrequency *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__RigFrequency(struct soap*, const char *, int, contest25__RigFrequency *const*, const char *);
SOAP_FMAC3 contest25__RigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest25__RigFrequency(struct soap*, const char*, contest25__RigFrequency **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__RigFrequency(struct soap*, contest25__RigFrequency *const*, const char*, const char*);
SOAP_FMAC3 contest25__RigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest25__RigFrequency(struct soap*, contest25__RigFrequency **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion_DEFINED
#define SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__QsoIdVersion(struct soap*, contest25__QsoIdVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__QsoIdVersion(struct soap*, const char *, int, contest25__QsoIdVersion *const*, const char *);
SOAP_FMAC3 contest25__QsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest25__QsoIdVersion(struct soap*, const char*, contest25__QsoIdVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__QsoIdVersion(struct soap*, contest25__QsoIdVersion *const*, const char*, const char*);
SOAP_FMAC3 contest25__QsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest25__QsoIdVersion(struct soap*, contest25__QsoIdVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion_DEFINED
#define SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfQsoIdVersion(struct soap*, contest25__ArrayOfQsoIdVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfQsoIdVersion(struct soap*, const char *, int, contest25__ArrayOfQsoIdVersion *const*, const char *);
SOAP_FMAC3 contest25__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfQsoIdVersion(struct soap*, const char*, contest25__ArrayOfQsoIdVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfQsoIdVersion(struct soap*, contest25__ArrayOfQsoIdVersion *const*, const char*, const char*);
SOAP_FMAC3 contest25__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfQsoIdVersion(struct soap*, contest25__ArrayOfQsoIdVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso_DEFINED
#define SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfQso(struct soap*, contest25__ArrayOfQso *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfQso(struct soap*, const char *, int, contest25__ArrayOfQso *const*, const char *);
SOAP_FMAC3 contest25__ArrayOfQso ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfQso(struct soap*, const char*, contest25__ArrayOfQso **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfQso(struct soap*, contest25__ArrayOfQso *const*, const char*, const char*);
SOAP_FMAC3 contest25__ArrayOfQso ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfQso(struct soap*, contest25__ArrayOfQso **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring_DEFINED
#define SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest26__ArrayOfstring(struct soap*, contest26__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest26__ArrayOfstring(struct soap*, const char *, int, contest26__ArrayOfstring *const*, const char *);
SOAP_FMAC3 contest26__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTocontest26__ArrayOfstring(struct soap*, const char*, contest26__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest26__ArrayOfstring(struct soap*, contest26__ArrayOfstring *const*, const char*, const char*);
SOAP_FMAC3 contest26__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTocontest26__ArrayOfstring(struct soap*, contest26__ArrayOfstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTocontest25__Qso_DEFINED
#define SOAP_TYPE_C2_PointerTocontest25__Qso_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__Qso(struct soap*, contest25__Qso *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__Qso(struct soap*, const char *, int, contest25__Qso *const*, const char *);
SOAP_FMAC3 contest25__Qso ** SOAP_FMAC4 soap_in_PointerTocontest25__Qso(struct soap*, const char*, contest25__Qso **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__Qso(struct soap*, contest25__Qso *const*, const char*, const char*);
SOAP_FMAC3 contest25__Qso ** SOAP_FMAC4 soap_get_PointerTocontest25__Qso(struct soap*, contest25__Qso **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_C2_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C2__XML_DEFINED
#define SOAP_TYPE_C2__XML_DEFINED
#endif

#ifndef SOAP_TYPE_C2__QName_DEFINED
#define SOAP_TYPE_C2__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_string_DEFINED
#define SOAP_TYPE_C2_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency_DEFINED
#define SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap*, std::vector<contest25__RigFrequency *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap*, const std::vector<contest25__RigFrequency *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap*, const char*, int, const std::vector<contest25__RigFrequency *> *, const char*);
SOAP_FMAC3 std::vector<contest25__RigFrequency *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap*, const char*, std::vector<contest25__RigFrequency *> *, const char*);
SOAP_FMAC1 std::vector<contest25__RigFrequency *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<contest25__RigFrequency *>  * soap_new_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion_DEFINED
#define SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap*, std::vector<contest25__QsoIdVersion *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap*, const std::vector<contest25__QsoIdVersion *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap*, const char*, int, const std::vector<contest25__QsoIdVersion *> *, const char*);
SOAP_FMAC3 std::vector<contest25__QsoIdVersion *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap*, const char*, std::vector<contest25__QsoIdVersion *> *, const char*);
SOAP_FMAC1 std::vector<contest25__QsoIdVersion *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<contest25__QsoIdVersion *>  * soap_new_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso_DEFINED
#define SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__Qso(struct soap*, std::vector<contest25__Qso *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__Qso(struct soap*, const std::vector<contest25__Qso *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__Qso(struct soap*, const char*, int, const std::vector<contest25__Qso *> *, const char*);
SOAP_FMAC3 std::vector<contest25__Qso *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__Qso(struct soap*, const char*, std::vector<contest25__Qso *> *, const char*);
SOAP_FMAC1 std::vector<contest25__Qso *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__Qso(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<contest25__Qso *>  * soap_new_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTocontest25__Qso(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_C2_std__vectorTemplateOfint_DEFINED
#define SOAP_TYPE_C2_std__vectorTemplateOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int> *, const char*);
SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int> *, const char*);
SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int>  * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_C2_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_C2_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

} // namespace C2


#endif

/* End of C2H.h */
