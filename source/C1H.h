/* C1H.h
   Generated by gSOAP 2.8.32 for ContestQsos.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef C1H_H
#define C1H_H
#include "C1Stub.h"

namespace C1 {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 C1_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 C1_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 C1_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 C1_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_C1_byte_DEFINED
#define SOAP_TYPE_C1_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_int_DEFINED
#define SOAP_TYPE_C1_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_double_DEFINED
#define SOAP_TYPE_C1_double_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_std__string_DEFINED
#define SOAP_TYPE_C1_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfRigFrequency_DEFINED
#define SOAP_TYPE_C1_contest2__ArrayOfRigFrequency_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfRigFrequency(struct soap*, const char*, int, const contest2__ArrayOfRigFrequency *, const char*);
SOAP_FMAC3 contest2__ArrayOfRigFrequency * SOAP_FMAC4 soap_in_contest2__ArrayOfRigFrequency(struct soap*, const char*, contest2__ArrayOfRigFrequency *, const char*);
SOAP_FMAC1 contest2__ArrayOfRigFrequency * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfRigFrequency(struct soap*, int, const char*, const char*, size_t*);

inline contest2__ArrayOfRigFrequency * soap_new_contest2__ArrayOfRigFrequency(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__ArrayOfRigFrequency(soap, n, NULL, NULL, NULL);
}

inline contest2__ArrayOfRigFrequency * soap_new_req_contest2__ArrayOfRigFrequency(
	struct soap *soap)
{
	contest2__ArrayOfRigFrequency *_p = soap_new_contest2__ArrayOfRigFrequency(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest2__ArrayOfRigFrequency * soap_new_set_contest2__ArrayOfRigFrequency(
	struct soap *soap,
	const std::vector<contest2__RigFrequency *> & rf_USCOREel)
{
	contest2__ArrayOfRigFrequency *_p = soap_new_contest2__ArrayOfRigFrequency(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__ArrayOfRigFrequency::rf_USCOREel = rf_USCOREel;
	}
	return _p;
}

inline int soap_write_contest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:ArrayOfRigFrequency", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__ArrayOfRigFrequency * SOAP_FMAC4 soap_get_contest2__ArrayOfRigFrequency(struct soap*, contest2__ArrayOfRigFrequency *, const char*, const char*);

inline int soap_read_contest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__ArrayOfRigFrequency(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__RigFrequency_DEFINED
#define SOAP_TYPE_C1_contest2__RigFrequency_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__RigFrequency(struct soap*, const char*, int, const contest2__RigFrequency *, const char*);
SOAP_FMAC3 contest2__RigFrequency * SOAP_FMAC4 soap_in_contest2__RigFrequency(struct soap*, const char*, contest2__RigFrequency *, const char*);
SOAP_FMAC1 contest2__RigFrequency * SOAP_FMAC2 soap_instantiate_contest2__RigFrequency(struct soap*, int, const char*, const char*, size_t*);

inline contest2__RigFrequency * soap_new_contest2__RigFrequency(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__RigFrequency(soap, n, NULL, NULL, NULL);
}

inline contest2__RigFrequency * soap_new_req_contest2__RigFrequency(
	struct soap *soap,
	const std::string& station,
	int networkLetter,
	const std::string& label,
	int rigNumber,
	double xmitFreq,
	double recvFreq,
	int mode)
{
	contest2__RigFrequency *_p = soap_new_contest2__RigFrequency(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__RigFrequency::station = station;
		_p->contest2__RigFrequency::networkLetter = networkLetter;
		_p->contest2__RigFrequency::label = label;
		_p->contest2__RigFrequency::rigNumber = rigNumber;
		_p->contest2__RigFrequency::xmitFreq = xmitFreq;
		_p->contest2__RigFrequency::recvFreq = recvFreq;
		_p->contest2__RigFrequency::mode = mode;
	}
	return _p;
}

inline contest2__RigFrequency * soap_new_set_contest2__RigFrequency(
	struct soap *soap,
	const std::string& station,
	int networkLetter,
	const std::string& label,
	int rigNumber,
	double xmitFreq,
	double recvFreq,
	int mode)
{
	contest2__RigFrequency *_p = soap_new_contest2__RigFrequency(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__RigFrequency::station = station;
		_p->contest2__RigFrequency::networkLetter = networkLetter;
		_p->contest2__RigFrequency::label = label;
		_p->contest2__RigFrequency::rigNumber = rigNumber;
		_p->contest2__RigFrequency::xmitFreq = xmitFreq;
		_p->contest2__RigFrequency::recvFreq = recvFreq;
		_p->contest2__RigFrequency::mode = mode;
	}
	return _p;
}

inline int soap_write_contest2__RigFrequency(struct soap *soap, contest2__RigFrequency const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:RigFrequency", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__RigFrequency * SOAP_FMAC4 soap_get_contest2__RigFrequency(struct soap*, contest2__RigFrequency *, const char*, const char*);

inline int soap_read_contest2__RigFrequency(struct soap *soap, contest2__RigFrequency *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__RigFrequency(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__LogSummary_DEFINED
#define SOAP_TYPE_C1_contest2__LogSummary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__LogSummary(struct soap*, const char*, int, const contest2__LogSummary *, const char*);
SOAP_FMAC3 contest2__LogSummary * SOAP_FMAC4 soap_in_contest2__LogSummary(struct soap*, const char*, contest2__LogSummary *, const char*);
SOAP_FMAC1 contest2__LogSummary * SOAP_FMAC2 soap_instantiate_contest2__LogSummary(struct soap*, int, const char*, const char*, size_t*);

inline contest2__LogSummary * soap_new_contest2__LogSummary(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__LogSummary(soap, n, NULL, NULL, NULL);
}

inline contest2__LogSummary * soap_new_req_contest2__LogSummary(
	struct soap *soap,
	int logState,
	contest2__ArrayOfQsoIdVersion *logSummaryIds)
{
	contest2__LogSummary *_p = soap_new_contest2__LogSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__LogSummary::logState = logState;
		_p->contest2__LogSummary::logSummaryIds = logSummaryIds;
	}
	return _p;
}

inline contest2__LogSummary * soap_new_set_contest2__LogSummary(
	struct soap *soap,
	int logState,
	contest2__ArrayOfQsoIdVersion *logSummaryIds)
{
	contest2__LogSummary *_p = soap_new_contest2__LogSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__LogSummary::logState = logState;
		_p->contest2__LogSummary::logSummaryIds = logSummaryIds;
	}
	return _p;
}

inline int soap_write_contest2__LogSummary(struct soap *soap, contest2__LogSummary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:LogSummary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__LogSummary * SOAP_FMAC4 soap_get_contest2__LogSummary(struct soap*, contest2__LogSummary *, const char*, const char*);

inline int soap_read_contest2__LogSummary(struct soap *soap, contest2__LogSummary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__LogSummary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion_DEFINED
#define SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfQsoIdVersion(struct soap*, const char*, int, const contest2__ArrayOfQsoIdVersion *, const char*);
SOAP_FMAC3 contest2__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_in_contest2__ArrayOfQsoIdVersion(struct soap*, const char*, contest2__ArrayOfQsoIdVersion *, const char*);
SOAP_FMAC1 contest2__ArrayOfQsoIdVersion * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfQsoIdVersion(struct soap*, int, const char*, const char*, size_t*);

inline contest2__ArrayOfQsoIdVersion * soap_new_contest2__ArrayOfQsoIdVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__ArrayOfQsoIdVersion(soap, n, NULL, NULL, NULL);
}

inline contest2__ArrayOfQsoIdVersion * soap_new_req_contest2__ArrayOfQsoIdVersion(
	struct soap *soap)
{
	contest2__ArrayOfQsoIdVersion *_p = soap_new_contest2__ArrayOfQsoIdVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest2__ArrayOfQsoIdVersion * soap_new_set_contest2__ArrayOfQsoIdVersion(
	struct soap *soap,
	const std::vector<contest2__QsoIdVersion *> & id_USCOREel)
{
	contest2__ArrayOfQsoIdVersion *_p = soap_new_contest2__ArrayOfQsoIdVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__ArrayOfQsoIdVersion::id_USCOREel = id_USCOREel;
	}
	return _p;
}

inline int soap_write_contest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:ArrayOfQsoIdVersion", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_get_contest2__ArrayOfQsoIdVersion(struct soap*, contest2__ArrayOfQsoIdVersion *, const char*, const char*);

inline int soap_read_contest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__ArrayOfQsoIdVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__QsoIdVersion_DEFINED
#define SOAP_TYPE_C1_contest2__QsoIdVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__QsoIdVersion(struct soap*, const char*, int, const contest2__QsoIdVersion *, const char*);
SOAP_FMAC3 contest2__QsoIdVersion * SOAP_FMAC4 soap_in_contest2__QsoIdVersion(struct soap*, const char*, contest2__QsoIdVersion *, const char*);
SOAP_FMAC1 contest2__QsoIdVersion * SOAP_FMAC2 soap_instantiate_contest2__QsoIdVersion(struct soap*, int, const char*, const char*, size_t*);

inline contest2__QsoIdVersion * soap_new_contest2__QsoIdVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__QsoIdVersion(soap, n, NULL, NULL, NULL);
}

inline contest2__QsoIdVersion * soap_new_req_contest2__QsoIdVersion(
	struct soap *soap,
	int version,
	const std::string& updatedBy,
	const std::string& id)
{
	contest2__QsoIdVersion *_p = soap_new_contest2__QsoIdVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__QsoIdVersion::version = version;
		_p->contest2__QsoIdVersion::updatedBy = updatedBy;
		_p->contest2__QsoIdVersion::id = id;
	}
	return _p;
}

inline contest2__QsoIdVersion * soap_new_set_contest2__QsoIdVersion(
	struct soap *soap,
	int version,
	const std::string& updatedBy,
	const std::string& id)
{
	contest2__QsoIdVersion *_p = soap_new_contest2__QsoIdVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__QsoIdVersion::version = version;
		_p->contest2__QsoIdVersion::updatedBy = updatedBy;
		_p->contest2__QsoIdVersion::id = id;
	}
	return _p;
}

inline int soap_write_contest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:QsoIdVersion", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__QsoIdVersion * SOAP_FMAC4 soap_get_contest2__QsoIdVersion(struct soap*, contest2__QsoIdVersion *, const char*, const char*);

inline int soap_read_contest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__QsoIdVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__QsoUpdate_DEFINED
#define SOAP_TYPE_C1_contest2__QsoUpdate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__QsoUpdate(struct soap*, const char*, int, const contest2__QsoUpdate *, const char*);
SOAP_FMAC3 contest2__QsoUpdate * SOAP_FMAC4 soap_in_contest2__QsoUpdate(struct soap*, const char*, contest2__QsoUpdate *, const char*);
SOAP_FMAC1 contest2__QsoUpdate * SOAP_FMAC2 soap_instantiate_contest2__QsoUpdate(struct soap*, int, const char*, const char*, size_t*);

inline contest2__QsoUpdate * soap_new_contest2__QsoUpdate(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__QsoUpdate(soap, n, NULL, NULL, NULL);
}

inline contest2__QsoUpdate * soap_new_req_contest2__QsoUpdate(
	struct soap *soap,
	contest2__ArrayOfQso *qsoArray,
	int logState)
{
	contest2__QsoUpdate *_p = soap_new_contest2__QsoUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__QsoUpdate::qsoArray = qsoArray;
		_p->contest2__QsoUpdate::logState = logState;
	}
	return _p;
}

inline contest2__QsoUpdate * soap_new_set_contest2__QsoUpdate(
	struct soap *soap,
	contest2__ArrayOfQso *qsoArray,
	int logState)
{
	contest2__QsoUpdate *_p = soap_new_contest2__QsoUpdate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__QsoUpdate::qsoArray = qsoArray;
		_p->contest2__QsoUpdate::logState = logState;
	}
	return _p;
}

inline int soap_write_contest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:QsoUpdate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__QsoUpdate * SOAP_FMAC4 soap_get_contest2__QsoUpdate(struct soap*, contest2__QsoUpdate *, const char*, const char*);

inline int soap_read_contest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__QsoUpdate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfQso_DEFINED
#define SOAP_TYPE_C1_contest2__ArrayOfQso_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfQso(struct soap*, const char*, int, const contest2__ArrayOfQso *, const char*);
SOAP_FMAC3 contest2__ArrayOfQso * SOAP_FMAC4 soap_in_contest2__ArrayOfQso(struct soap*, const char*, contest2__ArrayOfQso *, const char*);
SOAP_FMAC1 contest2__ArrayOfQso * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfQso(struct soap*, int, const char*, const char*, size_t*);

inline contest2__ArrayOfQso * soap_new_contest2__ArrayOfQso(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__ArrayOfQso(soap, n, NULL, NULL, NULL);
}

inline contest2__ArrayOfQso * soap_new_req_contest2__ArrayOfQso(
	struct soap *soap)
{
	contest2__ArrayOfQso *_p = soap_new_contest2__ArrayOfQso(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest2__ArrayOfQso * soap_new_set_contest2__ArrayOfQso(
	struct soap *soap,
	const std::vector<contest2__Qso *> & qso_USCOREel)
{
	contest2__ArrayOfQso *_p = soap_new_contest2__ArrayOfQso(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__ArrayOfQso::qso_USCOREel = qso_USCOREel;
	}
	return _p;
}

inline int soap_write_contest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:ArrayOfQso", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__ArrayOfQso * SOAP_FMAC4 soap_get_contest2__ArrayOfQso(struct soap*, contest2__ArrayOfQso *, const char*, const char*);

inline int soap_read_contest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__ArrayOfQso(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__Qso_DEFINED
#define SOAP_TYPE_C1_contest2__Qso_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__Qso(struct soap*, const char*, int, const contest2__Qso *, const char*);
SOAP_FMAC3 contest2__Qso * SOAP_FMAC4 soap_in_contest2__Qso(struct soap*, const char*, contest2__Qso *, const char*);
SOAP_FMAC1 contest2__Qso * SOAP_FMAC2 soap_instantiate_contest2__Qso(struct soap*, int, const char*, const char*, size_t*);

inline contest2__Qso * soap_new_contest2__Qso(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__Qso(soap, n, NULL, NULL, NULL);
}

inline contest2__Qso * soap_new_req_contest2__Qso(
	struct soap *soap,
	int time64H,
	int time64L,
	double xmitFreq,
	double recvFreq,
	int band,
	const std::string& station,
	int mode,
	int dupe,
	int serial,
	contest2__ArrayOfstring *qsoparts,
	int version,
	const std::string& idKey,
	const std::string& updatedBy)
{
	contest2__Qso *_p = soap_new_contest2__Qso(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__Qso::time64H = time64H;
		_p->contest2__Qso::time64L = time64L;
		_p->contest2__Qso::xmitFreq = xmitFreq;
		_p->contest2__Qso::recvFreq = recvFreq;
		_p->contest2__Qso::band = band;
		_p->contest2__Qso::station = station;
		_p->contest2__Qso::mode = mode;
		_p->contest2__Qso::dupe = dupe;
		_p->contest2__Qso::serial = serial;
		_p->contest2__Qso::qsoparts = qsoparts;
		_p->contest2__Qso::version = version;
		_p->contest2__Qso::idKey = idKey;
		_p->contest2__Qso::updatedBy = updatedBy;
	}
	return _p;
}

inline contest2__Qso * soap_new_set_contest2__Qso(
	struct soap *soap,
	int time64H,
	int time64L,
	double xmitFreq,
	double recvFreq,
	int band,
	const std::string& station,
	int mode,
	int dupe,
	int serial,
	contest2__ArrayOfstring *qsoparts,
	int version,
	const std::string& idKey,
	const std::string& updatedBy)
{
	contest2__Qso *_p = soap_new_contest2__Qso(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__Qso::time64H = time64H;
		_p->contest2__Qso::time64L = time64L;
		_p->contest2__Qso::xmitFreq = xmitFreq;
		_p->contest2__Qso::recvFreq = recvFreq;
		_p->contest2__Qso::band = band;
		_p->contest2__Qso::station = station;
		_p->contest2__Qso::mode = mode;
		_p->contest2__Qso::dupe = dupe;
		_p->contest2__Qso::serial = serial;
		_p->contest2__Qso::qsoparts = qsoparts;
		_p->contest2__Qso::version = version;
		_p->contest2__Qso::idKey = idKey;
		_p->contest2__Qso::updatedBy = updatedBy;
	}
	return _p;
}

inline int soap_write_contest2__Qso(struct soap *soap, contest2__Qso const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:Qso", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__Qso * SOAP_FMAC4 soap_get_contest2__Qso(struct soap*, contest2__Qso *, const char*, const char*);

inline int soap_read_contest2__Qso(struct soap *soap, contest2__Qso *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__Qso(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfint_DEFINED
#define SOAP_TYPE_C1_contest2__ArrayOfint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfint(struct soap*, const char*, int, const contest2__ArrayOfint *, const char*);
SOAP_FMAC3 contest2__ArrayOfint * SOAP_FMAC4 soap_in_contest2__ArrayOfint(struct soap*, const char*, contest2__ArrayOfint *, const char*);
SOAP_FMAC1 contest2__ArrayOfint * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfint(struct soap*, int, const char*, const char*, size_t*);

inline contest2__ArrayOfint * soap_new_contest2__ArrayOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__ArrayOfint(soap, n, NULL, NULL, NULL);
}

inline contest2__ArrayOfint * soap_new_req_contest2__ArrayOfint(
	struct soap *soap)
{
	contest2__ArrayOfint *_p = soap_new_contest2__ArrayOfint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest2__ArrayOfint * soap_new_set_contest2__ArrayOfint(
	struct soap *soap,
	const std::vector<int> & int_USCOREel)
{
	contest2__ArrayOfint *_p = soap_new_contest2__ArrayOfint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__ArrayOfint::int_USCOREel = int_USCOREel;
	}
	return _p;
}

inline int soap_write_contest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:ArrayOfint", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__ArrayOfint * SOAP_FMAC4 soap_get_contest2__ArrayOfint(struct soap*, contest2__ArrayOfint *, const char*, const char*);

inline int soap_read_contest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__ArrayOfint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfstring_DEFINED
#define SOAP_TYPE_C1_contest2__ArrayOfstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfstring(struct soap*, const char*, int, const contest2__ArrayOfstring *, const char*);
SOAP_FMAC3 contest2__ArrayOfstring * SOAP_FMAC4 soap_in_contest2__ArrayOfstring(struct soap*, const char*, contest2__ArrayOfstring *, const char*);
SOAP_FMAC1 contest2__ArrayOfstring * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline contest2__ArrayOfstring * soap_new_contest2__ArrayOfstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest2__ArrayOfstring(soap, n, NULL, NULL, NULL);
}

inline contest2__ArrayOfstring * soap_new_req_contest2__ArrayOfstring(
	struct soap *soap)
{
	contest2__ArrayOfstring *_p = soap_new_contest2__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline contest2__ArrayOfstring * soap_new_set_contest2__ArrayOfstring(
	struct soap *soap,
	const std::vector<std::string> & str_USCOREel)
{
	contest2__ArrayOfstring *_p = soap_new_contest2__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->contest2__ArrayOfstring::str_USCOREel = str_USCOREel;
	}
	return _p;
}

inline int soap_write_contest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "contest2:ArrayOfstring", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 contest2__ArrayOfstring * SOAP_FMAC4 soap_get_contest2__ArrayOfstring(struct soap*, contest2__ArrayOfstring *, const char*, const char*);

inline int soap_read_contest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_contest2__ArrayOfstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C1_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_C1_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C1_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_C1_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C1_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_C1_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C1_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_C1_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C1_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_C1_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_C1_contest3__ExchangeFrequencies_DEFINED
#define SOAP_TYPE_C1_contest3__ExchangeFrequencies_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__ExchangeFrequencies(struct soap*, struct contest3__ExchangeFrequencies *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__ExchangeFrequencies(struct soap*, const struct contest3__ExchangeFrequencies *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__ExchangeFrequencies(struct soap*, const char*, int, const struct contest3__ExchangeFrequencies *, const char*);
SOAP_FMAC3 struct contest3__ExchangeFrequencies * SOAP_FMAC4 soap_in_contest3__ExchangeFrequencies(struct soap*, const char*, struct contest3__ExchangeFrequencies *, const char*);
SOAP_FMAC1 struct contest3__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate_contest3__ExchangeFrequencies(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__ExchangeFrequencies * soap_new_contest3__ExchangeFrequencies(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__ExchangeFrequencies(soap, n, NULL, NULL, NULL);
}

inline struct contest3__ExchangeFrequencies * soap_new_req_contest3__ExchangeFrequencies(
	struct soap *soap)
{
	struct contest3__ExchangeFrequencies *_p = soap_new_contest3__ExchangeFrequencies(soap);
	if (_p)
	{	soap_default_contest3__ExchangeFrequencies(soap, _p);
	}
	return _p;
}

inline struct contest3__ExchangeFrequencies * soap_new_set_contest3__ExchangeFrequencies(
	struct soap *soap,
	contest2__ArrayOfRigFrequency *_IncomingFreqs)
{
	struct contest3__ExchangeFrequencies *_p = soap_new_contest3__ExchangeFrequencies(soap);
	if (_p)
	{	soap_default_contest3__ExchangeFrequencies(soap, _p);
		_p->_IncomingFreqs = _IncomingFreqs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__ExchangeFrequencies(struct soap*, const struct contest3__ExchangeFrequencies *, const char*, const char*);

inline int soap_write_contest3__ExchangeFrequencies(struct soap *soap, struct contest3__ExchangeFrequencies const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__ExchangeFrequencies(soap, p), 0) || soap_put_contest3__ExchangeFrequencies(soap, p, "contest3:ExchangeFrequencies", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__ExchangeFrequencies * SOAP_FMAC4 soap_get_contest3__ExchangeFrequencies(struct soap*, struct contest3__ExchangeFrequencies *, const char*, const char*);

inline int soap_read_contest3__ExchangeFrequencies(struct soap *soap, struct contest3__ExchangeFrequencies *p)
{
	if (p)
	{	soap_default_contest3__ExchangeFrequencies(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__ExchangeFrequencies(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse_DEFINED
#define SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__ExchangeFrequenciesResponse(struct soap*, struct contest3__ExchangeFrequenciesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__ExchangeFrequenciesResponse(struct soap*, const struct contest3__ExchangeFrequenciesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__ExchangeFrequenciesResponse(struct soap*, const char*, int, const struct contest3__ExchangeFrequenciesResponse *, const char*);
SOAP_FMAC3 struct contest3__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_in_contest3__ExchangeFrequenciesResponse(struct soap*, const char*, struct contest3__ExchangeFrequenciesResponse *, const char*);
SOAP_FMAC1 struct contest3__ExchangeFrequenciesResponse * SOAP_FMAC2 soap_instantiate_contest3__ExchangeFrequenciesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__ExchangeFrequenciesResponse * soap_new_contest3__ExchangeFrequenciesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__ExchangeFrequenciesResponse(soap, n, NULL, NULL, NULL);
}

inline struct contest3__ExchangeFrequenciesResponse * soap_new_req_contest3__ExchangeFrequenciesResponse(
	struct soap *soap)
{
	struct contest3__ExchangeFrequenciesResponse *_p = soap_new_contest3__ExchangeFrequenciesResponse(soap);
	if (_p)
	{	soap_default_contest3__ExchangeFrequenciesResponse(soap, _p);
	}
	return _p;
}

inline struct contest3__ExchangeFrequenciesResponse * soap_new_set_contest3__ExchangeFrequenciesResponse(
	struct soap *soap,
	contest2__ArrayOfRigFrequency *_response)
{
	struct contest3__ExchangeFrequenciesResponse *_p = soap_new_contest3__ExchangeFrequenciesResponse(soap);
	if (_p)
	{	soap_default_contest3__ExchangeFrequenciesResponse(soap, _p);
		_p->_response = _response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__ExchangeFrequenciesResponse(struct soap*, const struct contest3__ExchangeFrequenciesResponse *, const char*, const char*);

inline int soap_write_contest3__ExchangeFrequenciesResponse(struct soap *soap, struct contest3__ExchangeFrequenciesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__ExchangeFrequenciesResponse(soap, p), 0) || soap_put_contest3__ExchangeFrequenciesResponse(soap, p, "contest3:ExchangeFrequenciesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_get_contest3__ExchangeFrequenciesResponse(struct soap*, struct contest3__ExchangeFrequenciesResponse *, const char*, const char*);

inline int soap_read_contest3__ExchangeFrequenciesResponse(struct soap *soap, struct contest3__ExchangeFrequenciesResponse *p)
{
	if (p)
	{	soap_default_contest3__ExchangeFrequenciesResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__ExchangeFrequenciesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__ColumnNamesToIndices_DEFINED
#define SOAP_TYPE_C1_contest3__ColumnNamesToIndices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__ColumnNamesToIndices(struct soap*, struct contest3__ColumnNamesToIndices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__ColumnNamesToIndices(struct soap*, const struct contest3__ColumnNamesToIndices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__ColumnNamesToIndices(struct soap*, const char*, int, const struct contest3__ColumnNamesToIndices *, const char*);
SOAP_FMAC3 struct contest3__ColumnNamesToIndices * SOAP_FMAC4 soap_in_contest3__ColumnNamesToIndices(struct soap*, const char*, struct contest3__ColumnNamesToIndices *, const char*);
SOAP_FMAC1 struct contest3__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate_contest3__ColumnNamesToIndices(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__ColumnNamesToIndices * soap_new_contest3__ColumnNamesToIndices(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__ColumnNamesToIndices(soap, n, NULL, NULL, NULL);
}

inline struct contest3__ColumnNamesToIndices * soap_new_req_contest3__ColumnNamesToIndices(
	struct soap *soap,
	const std::string& _SessionId)
{
	struct contest3__ColumnNamesToIndices *_p = soap_new_contest3__ColumnNamesToIndices(soap);
	if (_p)
	{	soap_default_contest3__ColumnNamesToIndices(soap, _p);
		_p->_SessionId = _SessionId;
	}
	return _p;
}

inline struct contest3__ColumnNamesToIndices * soap_new_set_contest3__ColumnNamesToIndices(
	struct soap *soap,
	const std::string& _SessionId,
	contest2__ArrayOfstring *_ColumnNames)
{
	struct contest3__ColumnNamesToIndices *_p = soap_new_contest3__ColumnNamesToIndices(soap);
	if (_p)
	{	soap_default_contest3__ColumnNamesToIndices(soap, _p);
		_p->_SessionId = _SessionId;
		_p->_ColumnNames = _ColumnNames;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__ColumnNamesToIndices(struct soap*, const struct contest3__ColumnNamesToIndices *, const char*, const char*);

inline int soap_write_contest3__ColumnNamesToIndices(struct soap *soap, struct contest3__ColumnNamesToIndices const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__ColumnNamesToIndices(soap, p), 0) || soap_put_contest3__ColumnNamesToIndices(soap, p, "contest3:ColumnNamesToIndices", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__ColumnNamesToIndices * SOAP_FMAC4 soap_get_contest3__ColumnNamesToIndices(struct soap*, struct contest3__ColumnNamesToIndices *, const char*, const char*);

inline int soap_read_contest3__ColumnNamesToIndices(struct soap *soap, struct contest3__ColumnNamesToIndices *p)
{
	if (p)
	{	soap_default_contest3__ColumnNamesToIndices(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__ColumnNamesToIndices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse_DEFINED
#define SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__ColumnNamesToIndicesResponse(struct soap*, struct contest3__ColumnNamesToIndicesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__ColumnNamesToIndicesResponse(struct soap*, const struct contest3__ColumnNamesToIndicesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__ColumnNamesToIndicesResponse(struct soap*, const char*, int, const struct contest3__ColumnNamesToIndicesResponse *, const char*);
SOAP_FMAC3 struct contest3__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_in_contest3__ColumnNamesToIndicesResponse(struct soap*, const char*, struct contest3__ColumnNamesToIndicesResponse *, const char*);
SOAP_FMAC1 struct contest3__ColumnNamesToIndicesResponse * SOAP_FMAC2 soap_instantiate_contest3__ColumnNamesToIndicesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__ColumnNamesToIndicesResponse * soap_new_contest3__ColumnNamesToIndicesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__ColumnNamesToIndicesResponse(soap, n, NULL, NULL, NULL);
}

inline struct contest3__ColumnNamesToIndicesResponse * soap_new_req_contest3__ColumnNamesToIndicesResponse(
	struct soap *soap)
{
	struct contest3__ColumnNamesToIndicesResponse *_p = soap_new_contest3__ColumnNamesToIndicesResponse(soap);
	if (_p)
	{	soap_default_contest3__ColumnNamesToIndicesResponse(soap, _p);
	}
	return _p;
}

inline struct contest3__ColumnNamesToIndicesResponse * soap_new_set_contest3__ColumnNamesToIndicesResponse(
	struct soap *soap,
	contest2__ArrayOfint *_response)
{
	struct contest3__ColumnNamesToIndicesResponse *_p = soap_new_contest3__ColumnNamesToIndicesResponse(soap);
	if (_p)
	{	soap_default_contest3__ColumnNamesToIndicesResponse(soap, _p);
		_p->_response = _response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__ColumnNamesToIndicesResponse(struct soap*, const struct contest3__ColumnNamesToIndicesResponse *, const char*, const char*);

inline int soap_write_contest3__ColumnNamesToIndicesResponse(struct soap *soap, struct contest3__ColumnNamesToIndicesResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__ColumnNamesToIndicesResponse(soap, p), 0) || soap_put_contest3__ColumnNamesToIndicesResponse(soap, p, "contest3:ColumnNamesToIndicesResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_get_contest3__ColumnNamesToIndicesResponse(struct soap*, struct contest3__ColumnNamesToIndicesResponse *, const char*, const char*);

inline int soap_read_contest3__ColumnNamesToIndicesResponse(struct soap *soap, struct contest3__ColumnNamesToIndicesResponse *p)
{
	if (p)
	{	soap_default_contest3__ColumnNamesToIndicesResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__ColumnNamesToIndicesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__getQsosByKeyArray_DEFINED
#define SOAP_TYPE_C1_contest3__getQsosByKeyArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__getQsosByKeyArray(struct soap*, struct contest3__getQsosByKeyArray *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__getQsosByKeyArray(struct soap*, const struct contest3__getQsosByKeyArray *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__getQsosByKeyArray(struct soap*, const char*, int, const struct contest3__getQsosByKeyArray *, const char*);
SOAP_FMAC3 struct contest3__getQsosByKeyArray * SOAP_FMAC4 soap_in_contest3__getQsosByKeyArray(struct soap*, const char*, struct contest3__getQsosByKeyArray *, const char*);
SOAP_FMAC1 struct contest3__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate_contest3__getQsosByKeyArray(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__getQsosByKeyArray * soap_new_contest3__getQsosByKeyArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__getQsosByKeyArray(soap, n, NULL, NULL, NULL);
}

inline struct contest3__getQsosByKeyArray * soap_new_req_contest3__getQsosByKeyArray(
	struct soap *soap,
	const std::string& _SessionId)
{
	struct contest3__getQsosByKeyArray *_p = soap_new_contest3__getQsosByKeyArray(soap);
	if (_p)
	{	soap_default_contest3__getQsosByKeyArray(soap, _p);
		_p->_SessionId = _SessionId;
	}
	return _p;
}

inline struct contest3__getQsosByKeyArray * soap_new_set_contest3__getQsosByKeyArray(
	struct soap *soap,
	const std::string& _SessionId,
	contest2__ArrayOfstring *_QsoKeyArray)
{
	struct contest3__getQsosByKeyArray *_p = soap_new_contest3__getQsosByKeyArray(soap);
	if (_p)
	{	soap_default_contest3__getQsosByKeyArray(soap, _p);
		_p->_SessionId = _SessionId;
		_p->_QsoKeyArray = _QsoKeyArray;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__getQsosByKeyArray(struct soap*, const struct contest3__getQsosByKeyArray *, const char*, const char*);

inline int soap_write_contest3__getQsosByKeyArray(struct soap *soap, struct contest3__getQsosByKeyArray const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__getQsosByKeyArray(soap, p), 0) || soap_put_contest3__getQsosByKeyArray(soap, p, "contest3:getQsosByKeyArray", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__getQsosByKeyArray * SOAP_FMAC4 soap_get_contest3__getQsosByKeyArray(struct soap*, struct contest3__getQsosByKeyArray *, const char*, const char*);

inline int soap_read_contest3__getQsosByKeyArray(struct soap *soap, struct contest3__getQsosByKeyArray *p)
{
	if (p)
	{	soap_default_contest3__getQsosByKeyArray(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__getQsosByKeyArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse_DEFINED
#define SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__getQsosByKeyArrayResponse(struct soap*, struct contest3__getQsosByKeyArrayResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__getQsosByKeyArrayResponse(struct soap*, const struct contest3__getQsosByKeyArrayResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__getQsosByKeyArrayResponse(struct soap*, const char*, int, const struct contest3__getQsosByKeyArrayResponse *, const char*);
SOAP_FMAC3 struct contest3__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_in_contest3__getQsosByKeyArrayResponse(struct soap*, const char*, struct contest3__getQsosByKeyArrayResponse *, const char*);
SOAP_FMAC1 struct contest3__getQsosByKeyArrayResponse * SOAP_FMAC2 soap_instantiate_contest3__getQsosByKeyArrayResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__getQsosByKeyArrayResponse * soap_new_contest3__getQsosByKeyArrayResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__getQsosByKeyArrayResponse(soap, n, NULL, NULL, NULL);
}

inline struct contest3__getQsosByKeyArrayResponse * soap_new_req_contest3__getQsosByKeyArrayResponse(
	struct soap *soap)
{
	struct contest3__getQsosByKeyArrayResponse *_p = soap_new_contest3__getQsosByKeyArrayResponse(soap);
	if (_p)
	{	soap_default_contest3__getQsosByKeyArrayResponse(soap, _p);
	}
	return _p;
}

inline struct contest3__getQsosByKeyArrayResponse * soap_new_set_contest3__getQsosByKeyArrayResponse(
	struct soap *soap,
	contest2__QsoUpdate *_response)
{
	struct contest3__getQsosByKeyArrayResponse *_p = soap_new_contest3__getQsosByKeyArrayResponse(soap);
	if (_p)
	{	soap_default_contest3__getQsosByKeyArrayResponse(soap, _p);
		_p->_response = _response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__getQsosByKeyArrayResponse(struct soap*, const struct contest3__getQsosByKeyArrayResponse *, const char*, const char*);

inline int soap_write_contest3__getQsosByKeyArrayResponse(struct soap *soap, struct contest3__getQsosByKeyArrayResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__getQsosByKeyArrayResponse(soap, p), 0) || soap_put_contest3__getQsosByKeyArrayResponse(soap, p, "contest3:getQsosByKeyArrayResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_get_contest3__getQsosByKeyArrayResponse(struct soap*, struct contest3__getQsosByKeyArrayResponse *, const char*, const char*);

inline int soap_read_contest3__getQsosByKeyArrayResponse(struct soap *soap, struct contest3__getQsosByKeyArrayResponse *p)
{
	if (p)
	{	soap_default_contest3__getQsosByKeyArrayResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__getQsosByKeyArrayResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__addAndGetQsos_DEFINED
#define SOAP_TYPE_C1_contest3__addAndGetQsos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__addAndGetQsos(struct soap*, struct contest3__addAndGetQsos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__addAndGetQsos(struct soap*, const struct contest3__addAndGetQsos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__addAndGetQsos(struct soap*, const char*, int, const struct contest3__addAndGetQsos *, const char*);
SOAP_FMAC3 struct contest3__addAndGetQsos * SOAP_FMAC4 soap_in_contest3__addAndGetQsos(struct soap*, const char*, struct contest3__addAndGetQsos *, const char*);
SOAP_FMAC1 struct contest3__addAndGetQsos * SOAP_FMAC2 soap_instantiate_contest3__addAndGetQsos(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__addAndGetQsos * soap_new_contest3__addAndGetQsos(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__addAndGetQsos(soap, n, NULL, NULL, NULL);
}

inline struct contest3__addAndGetQsos * soap_new_req_contest3__addAndGetQsos(
	struct soap *soap,
	const std::string& _SessionId,
	int _OldState,
	int _MaxRequested)
{
	struct contest3__addAndGetQsos *_p = soap_new_contest3__addAndGetQsos(soap);
	if (_p)
	{	soap_default_contest3__addAndGetQsos(soap, _p);
		_p->_SessionId = _SessionId;
		_p->_OldState = _OldState;
		_p->_MaxRequested = _MaxRequested;
	}
	return _p;
}

inline struct contest3__addAndGetQsos * soap_new_set_contest3__addAndGetQsos(
	struct soap *soap,
	const std::string& _SessionId,
	contest2__ArrayOfQso *_QsoAddArray,
	int _OldState,
	int _MaxRequested)
{
	struct contest3__addAndGetQsos *_p = soap_new_contest3__addAndGetQsos(soap);
	if (_p)
	{	soap_default_contest3__addAndGetQsos(soap, _p);
		_p->_SessionId = _SessionId;
		_p->_QsoAddArray = _QsoAddArray;
		_p->_OldState = _OldState;
		_p->_MaxRequested = _MaxRequested;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__addAndGetQsos(struct soap*, const struct contest3__addAndGetQsos *, const char*, const char*);

inline int soap_write_contest3__addAndGetQsos(struct soap *soap, struct contest3__addAndGetQsos const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__addAndGetQsos(soap, p), 0) || soap_put_contest3__addAndGetQsos(soap, p, "contest3:addAndGetQsos", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__addAndGetQsos * SOAP_FMAC4 soap_get_contest3__addAndGetQsos(struct soap*, struct contest3__addAndGetQsos *, const char*, const char*);

inline int soap_read_contest3__addAndGetQsos(struct soap *soap, struct contest3__addAndGetQsos *p)
{
	if (p)
	{	soap_default_contest3__addAndGetQsos(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__addAndGetQsos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__addAndGetQsosResponse_DEFINED
#define SOAP_TYPE_C1_contest3__addAndGetQsosResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__addAndGetQsosResponse(struct soap*, struct contest3__addAndGetQsosResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__addAndGetQsosResponse(struct soap*, const struct contest3__addAndGetQsosResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__addAndGetQsosResponse(struct soap*, const char*, int, const struct contest3__addAndGetQsosResponse *, const char*);
SOAP_FMAC3 struct contest3__addAndGetQsosResponse * SOAP_FMAC4 soap_in_contest3__addAndGetQsosResponse(struct soap*, const char*, struct contest3__addAndGetQsosResponse *, const char*);
SOAP_FMAC1 struct contest3__addAndGetQsosResponse * SOAP_FMAC2 soap_instantiate_contest3__addAndGetQsosResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__addAndGetQsosResponse * soap_new_contest3__addAndGetQsosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__addAndGetQsosResponse(soap, n, NULL, NULL, NULL);
}

inline struct contest3__addAndGetQsosResponse * soap_new_req_contest3__addAndGetQsosResponse(
	struct soap *soap)
{
	struct contest3__addAndGetQsosResponse *_p = soap_new_contest3__addAndGetQsosResponse(soap);
	if (_p)
	{	soap_default_contest3__addAndGetQsosResponse(soap, _p);
	}
	return _p;
}

inline struct contest3__addAndGetQsosResponse * soap_new_set_contest3__addAndGetQsosResponse(
	struct soap *soap,
	contest2__QsoUpdate *_response)
{
	struct contest3__addAndGetQsosResponse *_p = soap_new_contest3__addAndGetQsosResponse(soap);
	if (_p)
	{	soap_default_contest3__addAndGetQsosResponse(soap, _p);
		_p->_response = _response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__addAndGetQsosResponse(struct soap*, const struct contest3__addAndGetQsosResponse *, const char*, const char*);

inline int soap_write_contest3__addAndGetQsosResponse(struct soap *soap, struct contest3__addAndGetQsosResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__addAndGetQsosResponse(soap, p), 0) || soap_put_contest3__addAndGetQsosResponse(soap, p, "contest3:addAndGetQsosResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__addAndGetQsosResponse * SOAP_FMAC4 soap_get_contest3__addAndGetQsosResponse(struct soap*, struct contest3__addAndGetQsosResponse *, const char*, const char*);

inline int soap_read_contest3__addAndGetQsosResponse(struct soap *soap, struct contest3__addAndGetQsosResponse *p)
{
	if (p)
	{	soap_default_contest3__addAndGetQsosResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__addAndGetQsosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__AddAndGetLogSummary_DEFINED
#define SOAP_TYPE_C1_contest3__AddAndGetLogSummary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__AddAndGetLogSummary(struct soap*, struct contest3__AddAndGetLogSummary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__AddAndGetLogSummary(struct soap*, const struct contest3__AddAndGetLogSummary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__AddAndGetLogSummary(struct soap*, const char*, int, const struct contest3__AddAndGetLogSummary *, const char*);
SOAP_FMAC3 struct contest3__AddAndGetLogSummary * SOAP_FMAC4 soap_in_contest3__AddAndGetLogSummary(struct soap*, const char*, struct contest3__AddAndGetLogSummary *, const char*);
SOAP_FMAC1 struct contest3__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate_contest3__AddAndGetLogSummary(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__AddAndGetLogSummary * soap_new_contest3__AddAndGetLogSummary(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__AddAndGetLogSummary(soap, n, NULL, NULL, NULL);
}

inline struct contest3__AddAndGetLogSummary * soap_new_req_contest3__AddAndGetLogSummary(
	struct soap *soap,
	const std::string& _SessionId,
	int _OldState,
	int _MaxRequested)
{
	struct contest3__AddAndGetLogSummary *_p = soap_new_contest3__AddAndGetLogSummary(soap);
	if (_p)
	{	soap_default_contest3__AddAndGetLogSummary(soap, _p);
		_p->_SessionId = _SessionId;
		_p->_OldState = _OldState;
		_p->_MaxRequested = _MaxRequested;
	}
	return _p;
}

inline struct contest3__AddAndGetLogSummary * soap_new_set_contest3__AddAndGetLogSummary(
	struct soap *soap,
	const std::string& _SessionId,
	contest2__ArrayOfQso *_QsoAddArray,
	int _OldState,
	int _MaxRequested)
{
	struct contest3__AddAndGetLogSummary *_p = soap_new_contest3__AddAndGetLogSummary(soap);
	if (_p)
	{	soap_default_contest3__AddAndGetLogSummary(soap, _p);
		_p->_SessionId = _SessionId;
		_p->_QsoAddArray = _QsoAddArray;
		_p->_OldState = _OldState;
		_p->_MaxRequested = _MaxRequested;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__AddAndGetLogSummary(struct soap*, const struct contest3__AddAndGetLogSummary *, const char*, const char*);

inline int soap_write_contest3__AddAndGetLogSummary(struct soap *soap, struct contest3__AddAndGetLogSummary const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__AddAndGetLogSummary(soap, p), 0) || soap_put_contest3__AddAndGetLogSummary(soap, p, "contest3:AddAndGetLogSummary", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__AddAndGetLogSummary * SOAP_FMAC4 soap_get_contest3__AddAndGetLogSummary(struct soap*, struct contest3__AddAndGetLogSummary *, const char*, const char*);

inline int soap_read_contest3__AddAndGetLogSummary(struct soap *soap, struct contest3__AddAndGetLogSummary *p)
{
	if (p)
	{	soap_default_contest3__AddAndGetLogSummary(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__AddAndGetLogSummary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse_DEFINED
#define SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__AddAndGetLogSummaryResponse(struct soap*, struct contest3__AddAndGetLogSummaryResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__AddAndGetLogSummaryResponse(struct soap*, const struct contest3__AddAndGetLogSummaryResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__AddAndGetLogSummaryResponse(struct soap*, const char*, int, const struct contest3__AddAndGetLogSummaryResponse *, const char*);
SOAP_FMAC3 struct contest3__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_in_contest3__AddAndGetLogSummaryResponse(struct soap*, const char*, struct contest3__AddAndGetLogSummaryResponse *, const char*);
SOAP_FMAC1 struct contest3__AddAndGetLogSummaryResponse * SOAP_FMAC2 soap_instantiate_contest3__AddAndGetLogSummaryResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__AddAndGetLogSummaryResponse * soap_new_contest3__AddAndGetLogSummaryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__AddAndGetLogSummaryResponse(soap, n, NULL, NULL, NULL);
}

inline struct contest3__AddAndGetLogSummaryResponse * soap_new_req_contest3__AddAndGetLogSummaryResponse(
	struct soap *soap)
{
	struct contest3__AddAndGetLogSummaryResponse *_p = soap_new_contest3__AddAndGetLogSummaryResponse(soap);
	if (_p)
	{	soap_default_contest3__AddAndGetLogSummaryResponse(soap, _p);
	}
	return _p;
}

inline struct contest3__AddAndGetLogSummaryResponse * soap_new_set_contest3__AddAndGetLogSummaryResponse(
	struct soap *soap,
	contest2__LogSummary *_response)
{
	struct contest3__AddAndGetLogSummaryResponse *_p = soap_new_contest3__AddAndGetLogSummaryResponse(soap);
	if (_p)
	{	soap_default_contest3__AddAndGetLogSummaryResponse(soap, _p);
		_p->_response = _response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__AddAndGetLogSummaryResponse(struct soap*, const struct contest3__AddAndGetLogSummaryResponse *, const char*, const char*);

inline int soap_write_contest3__AddAndGetLogSummaryResponse(struct soap *soap, struct contest3__AddAndGetLogSummaryResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__AddAndGetLogSummaryResponse(soap, p), 0) || soap_put_contest3__AddAndGetLogSummaryResponse(soap, p, "contest3:AddAndGetLogSummaryResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_get_contest3__AddAndGetLogSummaryResponse(struct soap*, struct contest3__AddAndGetLogSummaryResponse *, const char*, const char*);

inline int soap_read_contest3__AddAndGetLogSummaryResponse(struct soap *soap, struct contest3__AddAndGetLogSummaryResponse *p)
{
	if (p)
	{	soap_default_contest3__AddAndGetLogSummaryResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__AddAndGetLogSummaryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__GetSessionId_DEFINED
#define SOAP_TYPE_C1_contest3__GetSessionId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__GetSessionId(struct soap*, struct contest3__GetSessionId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__GetSessionId(struct soap*, const struct contest3__GetSessionId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__GetSessionId(struct soap*, const char*, int, const struct contest3__GetSessionId *, const char*);
SOAP_FMAC3 struct contest3__GetSessionId * SOAP_FMAC4 soap_in_contest3__GetSessionId(struct soap*, const char*, struct contest3__GetSessionId *, const char*);
SOAP_FMAC1 struct contest3__GetSessionId * SOAP_FMAC2 soap_instantiate_contest3__GetSessionId(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__GetSessionId * soap_new_contest3__GetSessionId(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__GetSessionId(soap, n, NULL, NULL, NULL);
}

inline struct contest3__GetSessionId * soap_new_req_contest3__GetSessionId(
	struct soap *soap)
{
	struct contest3__GetSessionId *_p = soap_new_contest3__GetSessionId(soap);
	if (_p)
	{	soap_default_contest3__GetSessionId(soap, _p);
	}
	return _p;
}

inline struct contest3__GetSessionId * soap_new_set_contest3__GetSessionId(
	struct soap *soap)
{
	struct contest3__GetSessionId *_p = soap_new_contest3__GetSessionId(soap);
	if (_p)
	{	soap_default_contest3__GetSessionId(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__GetSessionId(struct soap*, const struct contest3__GetSessionId *, const char*, const char*);

inline int soap_write_contest3__GetSessionId(struct soap *soap, struct contest3__GetSessionId const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__GetSessionId(soap, p), 0) || soap_put_contest3__GetSessionId(soap, p, "contest3:GetSessionId", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__GetSessionId * SOAP_FMAC4 soap_get_contest3__GetSessionId(struct soap*, struct contest3__GetSessionId *, const char*, const char*);

inline int soap_read_contest3__GetSessionId(struct soap *soap, struct contest3__GetSessionId *p)
{
	if (p)
	{	soap_default_contest3__GetSessionId(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__GetSessionId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_contest3__GetSessionIdResponse_DEFINED
#define SOAP_TYPE_C1_contest3__GetSessionIdResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__GetSessionIdResponse(struct soap*, struct contest3__GetSessionIdResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__GetSessionIdResponse(struct soap*, const struct contest3__GetSessionIdResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__GetSessionIdResponse(struct soap*, const char*, int, const struct contest3__GetSessionIdResponse *, const char*);
SOAP_FMAC3 struct contest3__GetSessionIdResponse * SOAP_FMAC4 soap_in_contest3__GetSessionIdResponse(struct soap*, const char*, struct contest3__GetSessionIdResponse *, const char*);
SOAP_FMAC1 struct contest3__GetSessionIdResponse * SOAP_FMAC2 soap_instantiate_contest3__GetSessionIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct contest3__GetSessionIdResponse * soap_new_contest3__GetSessionIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_contest3__GetSessionIdResponse(soap, n, NULL, NULL, NULL);
}

inline struct contest3__GetSessionIdResponse * soap_new_req_contest3__GetSessionIdResponse(
	struct soap *soap,
	const std::string& response)
{
	struct contest3__GetSessionIdResponse *_p = soap_new_contest3__GetSessionIdResponse(soap);
	if (_p)
	{	soap_default_contest3__GetSessionIdResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}

inline struct contest3__GetSessionIdResponse * soap_new_set_contest3__GetSessionIdResponse(
	struct soap *soap,
	const std::string& response)
{
	struct contest3__GetSessionIdResponse *_p = soap_new_contest3__GetSessionIdResponse(soap);
	if (_p)
	{	soap_default_contest3__GetSessionIdResponse(soap, _p);
		_p->response = response;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__GetSessionIdResponse(struct soap*, const struct contest3__GetSessionIdResponse *, const char*, const char*);

inline int soap_write_contest3__GetSessionIdResponse(struct soap *soap, struct contest3__GetSessionIdResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_contest3__GetSessionIdResponse(soap, p), 0) || soap_put_contest3__GetSessionIdResponse(soap, p, "contest3:GetSessionIdResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct contest3__GetSessionIdResponse * SOAP_FMAC4 soap_get_contest3__GetSessionIdResponse(struct soap*, struct contest3__GetSessionIdResponse *, const char*, const char*);

inline int soap_read_contest3__GetSessionIdResponse(struct soap *soap, struct contest3__GetSessionIdResponse *p)
{
	if (p)
	{	soap_default_contest3__GetSessionIdResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_contest3__GetSessionIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C1_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_C1_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C1_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_C1_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_C1_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_C1_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfRigFrequency(struct soap*, contest2__ArrayOfRigFrequency *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfRigFrequency(struct soap*, const char *, int, contest2__ArrayOfRigFrequency *const*, const char *);
SOAP_FMAC3 contest2__ArrayOfRigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfRigFrequency(struct soap*, const char*, contest2__ArrayOfRigFrequency **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfRigFrequency(struct soap*, contest2__ArrayOfRigFrequency *const*, const char*, const char*);
SOAP_FMAC3 contest2__ArrayOfRigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfRigFrequency(struct soap*, contest2__ArrayOfRigFrequency **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfint_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfint(struct soap*, contest2__ArrayOfint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfint(struct soap*, const char *, int, contest2__ArrayOfint *const*, const char *);
SOAP_FMAC3 contest2__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfint(struct soap*, const char*, contest2__ArrayOfint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfint(struct soap*, contest2__ArrayOfint *const*, const char*, const char*);
SOAP_FMAC3 contest2__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfint(struct soap*, contest2__ArrayOfint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__QsoUpdate_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__QsoUpdate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__QsoUpdate(struct soap*, contest2__QsoUpdate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__QsoUpdate(struct soap*, const char *, int, contest2__QsoUpdate *const*, const char *);
SOAP_FMAC3 contest2__QsoUpdate ** SOAP_FMAC4 soap_in_PointerTocontest2__QsoUpdate(struct soap*, const char*, contest2__QsoUpdate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__QsoUpdate(struct soap*, contest2__QsoUpdate *const*, const char*, const char*);
SOAP_FMAC3 contest2__QsoUpdate ** SOAP_FMAC4 soap_get_PointerTocontest2__QsoUpdate(struct soap*, contest2__QsoUpdate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__LogSummary_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__LogSummary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__LogSummary(struct soap*, contest2__LogSummary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__LogSummary(struct soap*, const char *, int, contest2__LogSummary *const*, const char *);
SOAP_FMAC3 contest2__LogSummary ** SOAP_FMAC4 soap_in_PointerTocontest2__LogSummary(struct soap*, const char*, contest2__LogSummary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__LogSummary(struct soap*, contest2__LogSummary *const*, const char*, const char*);
SOAP_FMAC3 contest2__LogSummary ** SOAP_FMAC4 soap_get_PointerTocontest2__LogSummary(struct soap*, contest2__LogSummary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__RigFrequency_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__RigFrequency_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__RigFrequency(struct soap*, contest2__RigFrequency *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__RigFrequency(struct soap*, const char *, int, contest2__RigFrequency *const*, const char *);
SOAP_FMAC3 contest2__RigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest2__RigFrequency(struct soap*, const char*, contest2__RigFrequency **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__RigFrequency(struct soap*, contest2__RigFrequency *const*, const char*, const char*);
SOAP_FMAC3 contest2__RigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest2__RigFrequency(struct soap*, contest2__RigFrequency **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfQsoIdVersion(struct soap*, contest2__ArrayOfQsoIdVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfQsoIdVersion(struct soap*, const char *, int, contest2__ArrayOfQsoIdVersion *const*, const char *);
SOAP_FMAC3 contest2__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfQsoIdVersion(struct soap*, const char*, contest2__ArrayOfQsoIdVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfQsoIdVersion(struct soap*, contest2__ArrayOfQsoIdVersion *const*, const char*, const char*);
SOAP_FMAC3 contest2__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfQsoIdVersion(struct soap*, contest2__ArrayOfQsoIdVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__QsoIdVersion(struct soap*, contest2__QsoIdVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__QsoIdVersion(struct soap*, const char *, int, contest2__QsoIdVersion *const*, const char *);
SOAP_FMAC3 contest2__QsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest2__QsoIdVersion(struct soap*, const char*, contest2__QsoIdVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__QsoIdVersion(struct soap*, contest2__QsoIdVersion *const*, const char*, const char*);
SOAP_FMAC3 contest2__QsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest2__QsoIdVersion(struct soap*, contest2__QsoIdVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfQso(struct soap*, contest2__ArrayOfQso *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfQso(struct soap*, const char *, int, contest2__ArrayOfQso *const*, const char *);
SOAP_FMAC3 contest2__ArrayOfQso ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfQso(struct soap*, const char*, contest2__ArrayOfQso **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfQso(struct soap*, contest2__ArrayOfQso *const*, const char*, const char*);
SOAP_FMAC3 contest2__ArrayOfQso ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfQso(struct soap*, contest2__ArrayOfQso **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__Qso_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__Qso_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__Qso(struct soap*, contest2__Qso *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__Qso(struct soap*, const char *, int, contest2__Qso *const*, const char *);
SOAP_FMAC3 contest2__Qso ** SOAP_FMAC4 soap_in_PointerTocontest2__Qso(struct soap*, const char*, contest2__Qso **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__Qso(struct soap*, contest2__Qso *const*, const char*, const char*);
SOAP_FMAC3 contest2__Qso ** SOAP_FMAC4 soap_get_PointerTocontest2__Qso(struct soap*, contest2__Qso **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring_DEFINED
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfstring(struct soap*, contest2__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfstring(struct soap*, const char *, int, contest2__ArrayOfstring *const*, const char *);
SOAP_FMAC3 contest2__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfstring(struct soap*, const char*, contest2__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfstring(struct soap*, contest2__ArrayOfstring *const*, const char*, const char*);
SOAP_FMAC3 contest2__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfstring(struct soap*, contest2__ArrayOfstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_C1__XML_DEFINED
#define SOAP_TYPE_C1__XML_DEFINED
#endif

#ifndef SOAP_TYPE_C1__QName_DEFINED
#define SOAP_TYPE_C1__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_string_DEFINED
#define SOAP_TYPE_C1_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency_DEFINED
#define SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap*, std::vector<contest2__RigFrequency *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap*, const std::vector<contest2__RigFrequency *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap*, const char*, int, const std::vector<contest2__RigFrequency *> *, const char*);
SOAP_FMAC3 std::vector<contest2__RigFrequency *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap*, const char*, std::vector<contest2__RigFrequency *> *, const char*);
SOAP_FMAC1 std::vector<contest2__RigFrequency *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<contest2__RigFrequency *>  * soap_new_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion_DEFINED
#define SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap*, std::vector<contest2__QsoIdVersion *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap*, const std::vector<contest2__QsoIdVersion *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap*, const char*, int, const std::vector<contest2__QsoIdVersion *> *, const char*);
SOAP_FMAC3 std::vector<contest2__QsoIdVersion *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap*, const char*, std::vector<contest2__QsoIdVersion *> *, const char*);
SOAP_FMAC1 std::vector<contest2__QsoIdVersion *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<contest2__QsoIdVersion *>  * soap_new_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso_DEFINED
#define SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__Qso(struct soap*, std::vector<contest2__Qso *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__Qso(struct soap*, const std::vector<contest2__Qso *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__Qso(struct soap*, const char*, int, const std::vector<contest2__Qso *> *, const char*);
SOAP_FMAC3 std::vector<contest2__Qso *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__Qso(struct soap*, const char*, std::vector<contest2__Qso *> *, const char*);
SOAP_FMAC1 std::vector<contest2__Qso *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__Qso(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<contest2__Qso *>  * soap_new_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTocontest2__Qso(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_C1_std__vectorTemplateOfint_DEFINED
#define SOAP_TYPE_C1_std__vectorTemplateOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int> *, const char*);
SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int> *, const char*);
SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int>  * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_C1_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_C1_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

} // namespace C1


#endif

/* End of C1H.h */
